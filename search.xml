<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/11/22/ELLIPTIC_CURVES_LaTeX/"/>
      <url>/2024/11/22/ELLIPTIC_CURVES_LaTeX/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="CRYPTOHACK-ELLIPTIC-CURVES"><a href="#CRYPTOHACK-ELLIPTIC-CURVES" class="headerlink" title="CRYPTOHACK-ELLIPTIC CURVES"></a>CRYPTOHACK-ELLIPTIC CURVES</h1><p>椭圆曲线在公钥密码学中的应用最早是在1985年提出的。在抵御了数十年的攻击之后，从2005年左右开始，它们被广泛使用，与之前的公钥密码系统（如RSA）相比，它们提供了诸多优势。<br>较小的椭圆曲线（EC）密钥提供了更大的强度，256位EC密钥具有与3072位RSA密钥相同的安全级别。此外，使用这些密钥机型的某些操作（包括签名）在时间和内存方面可能更为有效。最后，由于ECC比RSA更复杂，它具有鼓励开发人员使用可信库而不是自行开发的较好效果。<br>下面这些挑战旨在让你对椭圆曲线密码学（ECC）背后的陷门函数有直观的理解；让你初步接触其背后的数学结构；并让你尝试破解像椭圆曲线数字签名算法（ECDSA）这样的流行方案。</p><h2 id="BACKGROUND"><a href="#BACKGROUND" class="headerlink" title="BACKGROUND"></a>BACKGROUND</h2><h3 id="Background-Reading"><a href="#Background-Reading" class="headerlink" title="Background Reading"></a>Background Reading</h3><p>椭圆曲线密码学（ECC）是一种非对称密码协议，与RSA和Diffie-Hellman（DH）一样，依赖于陷门函数。总结一下：陷门函数允许客户端通过执行数学运算来保护数据机密，这在计算上很容易做到，但目前被认为解密起来很难。<br>对于RSA来说，陷门函数依赖于分解大数的难度。对于Diffie-Hellman来说，陷门函数依赖于有限域中离散对数问题的难度。对于RSA和DH来说，贯穿协议脉络的操作对我们来说都很熟悉，乘法和取数字的幂是我们在学校中会学到的。这方面ECC脱颖而出，因为除非你正在寻找相关的信息，否则ECC中的组操作不会出现在你的生活中。</p><blockquote><p>这里的讨论并不全面，对于真正想了解ECC的人，我推荐<a href="https://web.archive.org/web/20220412170936/https://crypto.stanford.edu/pbc/notes/elliptic/">Ben Lynn的椭圆曲线笔记</a>，以及Jeffrey Hoffstein、Jill Pipher、Joseph H.Silverman的教科书《数学密码学导论》。</p></blockquote><p>让我们看看所说的椭圆曲线到底是什么来开始思考。我们将会学习魏尔施特拉斯(Weierstrass)方程，其形式如下<br>$$<br>E:Y^2&#x3D;X^3+aX+b<br>$$<br>椭圆曲线有一个惊人的特性：我们可以定义一个算子，我们称之为“点加法”。此运算符在某条曲线上取两个点，并在曲线上产生第三个点。取椭圆曲线上的点集，点加法定义了一个阿贝尔(Abelian)群运算。</p><blockquote><p>这里有很多可说的。让我们激励这一点！我们可以将点的标量乘法理解为同一点的重复点加法。$Q&#x3D;[2]P&#x3D;P+P$.原来标量乘法是一个陷门函数！ECC依赖于在已给出$Q$和$P$的$Q&#x3D;[n]P$中找到$n$的难度。</p></blockquote><p><strong>那么，我们如何理解点加法呢？</strong></p><p>从几何上讲，我们可以这样理解点加法$P+Q$。取一个椭圆曲线并沿曲线标记两点$P,Q$及其$x,y$坐标。画一条穿过两个点的直线。现在继续这条线，直到它第三次与你的曲线相交。标记这个新的交点$R$。最后，取$R$并沿$y$方向反射，生成$R^{\prime}&#x3D;R(x,-y)$。这个点加的结果就是$P+Q&#x3D;R^{\prime}$</p><p>如果我们想把两个相同的点像$P+P$这样加在一起呢？我们不能通过一个点绘制一条唯一的线，但我们可以通过计算该点处曲线的切线来选择一条唯一线。计算点$P$处的切线。继续这条线，直到它与点$R$处的曲线相交。像以前一样表示这一点：$P+P&#x3D;R^{\prime}&#x3D;R(x,-y)$</p><p>如果没有第三个交点怎么办？有时你会选择两个点$P,Q$，这条线就不会再与曲线相交了。在这种情况下，我们说这条线与点（$O$）相交，点是位于无穷远处每条垂直线末端的一个点。因此，椭圆曲线的点加法是在2D空间中定义的，其中一个附加点位于无穷远处。</p><p>下面是一个图表，作为理解这些不同情况的视觉辅助</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241118164305997.png" alt="image-20241118164305997"></p><p>点$O$充当组中的恒等算子：$P+O&#x3D;P$和$P+(-P)&#x3D;O$</p><p>这就引出了定义椭圆曲线的问题。</p><p><strong>定义：</strong>椭圆曲线E是Weierstrass方程的解集<br>$$<br>E:Y^2&#x3D;X^3+aX+b<br>$$<br>与无穷远处的一个点$O$。参数$a,b$必须满足下述关系<br>$$<br>4a^3+27b^2\neq{O}<br>$$<br>以确保曲线上没有奇点。</p><p>形式上，设$E$为椭圆曲线，点加法具有以下性质</p><blockquote><p>(a) P+O&#x3D;O+P&#x3D;P</p><p>(b) P+(-P)&#x3D;O</p><p>(c) (P+Q)+R&#x3D;P+(Q+R)</p><p>(d) P+Q&#x3D;Q+P</p></blockquote><p>在ECC中，我们研究有限域$\mathbb{F}_p$上的椭圆曲线。这意味着我们观察曲线对特征$p$的模，椭圆曲线将不再是曲线，而是一组$x,y$坐标为$\mathbb{F}_p$中整数的点。</p><p>以下入门挑战将带您完成ECC的计算，并让您习惯ECC构建的基本操作，玩得开心！</p><p>性质<code>(d)</code>表明点加法是可交换的。flag是我们给具有交换运算的群起的名字。</p><p>flag: crypto{Abelian}</p><h2 id="STARTER"><a href="#STARTER" class="headerlink" title="STARTER"></a>STARTER</h2><h3 id="Point-Negation"><a href="#Point-Negation" class="headerlink" title="Point Negation"></a>Point Negation</h3><p>在背景部分，我们介绍了如何将椭圆曲线上的点加法视为阿贝尔群运算的基础知识。在这幅几何图中，我们允许曲线上的坐标是任何实数。</p><p>为了在密码环境中应用椭圆曲线，我们研究了在有限域$\mathbb{F}_p$中具有坐标的椭圆曲线。</p><p>我们仍然认为椭圆曲线的形式为$E:Y^{2}&#x3D;X^3+aX+b$，并满足以下条件：$a,b\in{\mathbb{F}_p},4a^3+27b^2\neq{O}$</p><p>然而我们不再将椭圆曲线看作一个几何对象，而是一组被如下定义的点<br>$$<br>E(\mathbb{F}_p)&#x3D;{(x,y):x,y\in{\mathbb{F}}_p~satisfying~~y^2&#x3D;x^3+ax+b}\cup{O}<br>$$</p><blockquote><p>注意：我们在背景中介绍的所有内容仍然有效。群的恒等算子是无穷远处的点：$O$，加法定律不变。给定$E(\mathbb{F}_p)$中的两个点，加法将在$E(\mathbb{F}_p)$中生成另一个点。</p></blockquote><p>对于Starter组中的所有挑战，我们将使用椭圆曲线<br>$$<br>E:Y^2&#x3D;X^3+497X+1768<del>mod</del>9739<br>$$<br>使用该曲线和点$P(8045,6936)$，找到点$Q(x,y)$使得$P+Q&#x3D;O$</p><p>记住，我们现在在有限域中工作，所以你需要正确处理负数。</p><p><strong>资料：</strong></p><p>- <a href="https://curves.xargs.org/">The Animated Elliptic Curve: Visualizing Elliptic Curve Cryptography</a></p><h4 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h4><p>$P+Q&#x3D;O$，可知<code>Q</code>的<code>x</code>为8045，<code>y</code>为-6939，对9739取模得到2803。</p><p>flag: crypto{8045,2803}</p><h3 id="Point-Addition"><a href="#Point-Addition" class="headerlink" title="Point Addition"></a>Point Addition</h3><p>在使用椭圆曲线密码学时，我们需要将点加在一起。在背景挑战中，我们通过几何方法找到了一条穿过两个点的线，找到了第三个交点，然后沿着y轴反射。</p><p>结果表明，存在一种计算椭圆曲线点加法的有效算法。</p><p>摘自Jeffrey Hoffstein、Jill Pipher、Joseph H.Silverman的《数学密码学导论》，以下算法将计算椭圆曲线上两点的加法</p><blockquote><p><strong>两点的点加法算法：$P+Q$</strong></p><p>(a) 如果$P&#x3D;O$，那么$P+Q&#x3D;Q$</p><p>(b) 否则，如果$Q&#x3D;O$，那么$P+Q&#x3D;P$</p><p>(c) 否则，记$P&#x3D;(x_1,y_1),~Q&#x3D;(x_2,y_2)$</p><p>(d) 如果$x_1&#x3D;x_2,~y_1&#x3D;-y_2$，那么$P+Q&#x3D;O$</p><p>(e) 否则：</p><p>​    (e1) 如果$P\neq{Q}:\lambda&#x3D;(y_2-y_1)&#x2F;(x_2-x_1)$</p><p>​    (e2) 如果$P&#x3D;Q:\lambda&#x3D;(3x^2_1+a)&#x2F;2y_1$</p><p>(f) $x_3&#x3D;\lambda^2-x_1-x_2$</p><p>(g) $y_3&#x3D;\lambda(x_1-x_3)-y_1$</p><p>(h) $P+Q&#x3D;(x_3,y_3)$</p></blockquote><p>我们正在处理一个有限域，因此上述计算应该以$p$为模进行，我们不“除”整数，而是乘以一个数字的模逆。例如$5^{-1}\equiv{9}<del>mod</del>11$</p><p>我们将使用以下椭圆曲线和素数：<br>$$<br>E:Y^2&#x3D;X^3+497X+1768<del>mod</del>9739<br>$$</p><blockquote><p>你可以通过以下等式来测试你的算法：$X+Y&#x3D;(1024,4440),X+X&#x3D;(7284,2107)\for~~X&#x3D;(5274,2841),Y&#x3D;(8669,740)$</p></blockquote><p>使用该曲线和点$P&#x3D;(493,5564),Q&#x3D;(1539,4742),R&#x3D;(4403,5202)$，通过实现上述算法找到点$S(x,y)&#x3D;P+P+Q+R$</p><blockquote><p>在计算完$S$后，将坐标代入曲线以确保点$S$在$E(\mathbb{F}_p)$上</p></blockquote><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> GF</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, p</span>):</span><br><span class="line">        F = GF(p) <span class="comment"># 定义有限域</span></span><br><span class="line">        <span class="comment"># 让x,y在有限域内运算</span></span><br><span class="line">        <span class="variable language_">self</span>.x = F(x)</span><br><span class="line">        <span class="variable language_">self</span>.y = F(y)</span><br><span class="line">        <span class="variable language_">self</span>.modulus = p <span class="comment"># 模数</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition</span>(<span class="params">p1: Point, p2: Point, a, b</span>):</span><br><span class="line">    x1 = p1.x</span><br><span class="line">    y1 = p1.y</span><br><span class="line">    x2 = p2.x</span><br><span class="line">    y2 = p2.y</span><br><span class="line">    <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 == y2: <span class="comment"># 如果P,Q重合</span></span><br><span class="line">        d = (<span class="number">3</span>*x1**<span class="number">2</span> + a) / (<span class="number">2</span>*y1)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># P,Q为不同两点</span></span><br><span class="line">        d = (y2 - y1) / (x2 - x1)</span><br><span class="line">    x = d**<span class="number">2</span> - x1 - x2</span><br><span class="line">    y = d*(x1 - x) - y1</span><br><span class="line">    <span class="keyword">return</span> Point(x, y, p1.modulus)</span><br><span class="line"></span><br><span class="line">X = Point(<span class="number">5274</span>, <span class="number">2841</span>, <span class="number">9739</span>)</span><br><span class="line">Y = Point(<span class="number">8669</span>, <span class="number">740</span>, <span class="number">9739</span>)</span><br><span class="line">XY = Point(<span class="number">1024</span>, <span class="number">4440</span>, <span class="number">9739</span>)</span><br><span class="line">XX = Point(<span class="number">7284</span>, <span class="number">2107</span>, <span class="number">9739</span>)</span><br><span class="line"><span class="keyword">assert</span> addition(X, Y, <span class="number">497</span>, <span class="number">1768</span>).x == XY.x <span class="keyword">and</span> addition(X, Y, <span class="number">497</span>, <span class="number">1768</span>).y == XY.y</span><br><span class="line"><span class="keyword">assert</span> addition(X, X, <span class="number">497</span>, <span class="number">1768</span>).x == XX.x <span class="keyword">and</span> addition(X, X, <span class="number">497</span>, <span class="number">1768</span>).y == XX.y</span><br><span class="line">P = Point(<span class="number">493</span>, <span class="number">5564</span>, <span class="number">9739</span>)</span><br><span class="line">Q = Point(<span class="number">1539</span>, <span class="number">4742</span>, <span class="number">9739</span>)</span><br><span class="line">R = Point(<span class="number">4403</span>, <span class="number">5202</span>, <span class="number">9739</span>)</span><br><span class="line">x1 = addition(P, P, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line">x2 = addition(x1, Q, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line">x3 = addition(x2, R, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line"><span class="keyword">assert</span> x3.y**<span class="number">2</span> == x3.x**<span class="number">3</span> + <span class="number">497</span>*x3.x + <span class="number">1768</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;crypto&#123;&#x27;</span>+<span class="built_in">str</span>(x3.x)+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(x3.y)+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># crypto&#123;4215,2162&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Scalar-Multiplication"><a href="#Scalar-Multiplication" class="headerlink" title="Scalar Multiplication"></a>Scalar Multiplication</h3><p>两点的标量乘法由重复加法定义：$[3]P&#x3D;P+P+P$</p><p>在接下来的几个挑战中，我们将使用标量乘法在不安全的信道上创建共享密钥，类似于Diffie-Hellman挑战。</p><p>摘自Jeffrey Hoffstein、Jill Pipher、Joseph H.Silverman的《数学密码学导论》，以下算法将有效地计算椭圆曲线上一点的标量乘法</p><blockquote><p><strong>标量乘法的二重加法算法</strong></p><p>输入：$P\in{E(\mathbb{F}_p)}$和一个整数$n&gt;0$</p><p>输出：$Q&#x3D;[n]P\in{E(\mathbb{F}_p)}$</p><ol><li>设$Q&#x3D;P<del>and</del>R&#x3D;O$</li><li>while循环 n &gt; 0</li><li>如果$n\equiv{1}<del>mod</del>2$，设$R&#x3D;R+Q$</li><li>设$Q&#x3D;[2]Q<del>and</del>n&#x3D;\lfloor n&#x2F;2 \rfloor$</li><li>如果$n&gt;0$，继续第二步循环</li><li>返回点$R&#x3D;[n]P$</li></ol></blockquote><blockquote><p>这不是最有效的算法，有许多有趣的方法可以改进这种计算，但这对我们的工作来说已经足够了。</p></blockquote><p>我们将使用以下椭圆曲线和素数：<br>$$<br>E:Y^2&#x3D;X^3+497X+1768<del>mod</del>9739<br>$$</p><blockquote><p>你可以通过以下等式来测试你的算法：</p><p>$[1337]X&#x3D;(1089,6931)<del>for</del>X&#x3D;(5323,5438)$</p></blockquote><p>使用该曲线和点$P&#x3D;(2339,2213)$，通过实现上述算法找到点$Q(x,y)&#x3D;[7863]P$</p><blockquote><p>在计算完$Q$后，将坐标代入曲线以确保点$Q$在$E(\mathbb{F}_p)$上</p></blockquote><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> GF</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, p</span>):</span><br><span class="line">        F = GF(p) <span class="comment"># 定义有限域</span></span><br><span class="line">        <span class="comment"># 让x,y在有限域内运算</span></span><br><span class="line">        <span class="variable language_">self</span>.x = F(x)</span><br><span class="line">        <span class="variable language_">self</span>.y = F(y)</span><br><span class="line">        <span class="variable language_">self</span>.modulus = p <span class="comment"># 模数</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition</span>(<span class="params">p1: Point, p2: Point, a, b</span>):</span><br><span class="line">    x1 = p1.x</span><br><span class="line">    y1 = p1.y</span><br><span class="line">    x2 = p2.x</span><br><span class="line">    y2 = p2.y</span><br><span class="line">    <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 == y2: <span class="comment"># 如果P,Q重合</span></span><br><span class="line">        d = (<span class="number">3</span>*x1**<span class="number">2</span> + a) / (<span class="number">2</span>*y1)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># P,Q为不同两点</span></span><br><span class="line">        d = (y2 - y1) / (x2 - x1)</span><br><span class="line">    x = d**<span class="number">2</span> - x1 - x2</span><br><span class="line">    y = d*(x1 - x) - y1</span><br><span class="line">    <span class="keyword">return</span> Point(x, y, p1.modulus)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Scalar_Multiplication</span>(<span class="params">p: Point, n, a, b</span>):</span><br><span class="line">    q = p</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = addition(r, q, a, b)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                r = q</span><br><span class="line">        q = addition(q, q, a, b)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">p = Point(<span class="number">2339</span>, <span class="number">2213</span>, <span class="number">9739</span>)</span><br><span class="line">s = Scalar_Multiplication(p, <span class="number">7863</span>, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;crypto&#123;&#x27;</span> + <span class="built_in">str</span>(s.x) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(s.y) + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># crypto&#123;9467,2742&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Curves-and-Logs"><a href="#Curves-and-Logs" class="headerlink" title="Curves and Logs"></a>Curves and Logs</h3><p>椭圆曲线离散对数问题（ECDLP）是找到一个整数$n$，使得$Q&#x3D;[n]P$的问题。</p><p>就像我们遇到的离散对数问题一样，$E(\mathbb{F}_p)$中点的标量乘法似乎是一个很难解开的问题，当$P$生成一个大小为$q$的子群时，最有效的算法在$q^{1&#x2F;2}$时间内运行。</p><p>这使其成为陷门函数的绝佳候选者。</p><p>Alice和Bob正在交谈，他们想创建一个共享密钥，这样他们就可以开始用一些对称的加密协议加密他们的消息。Alice和Bob不信任他们的连接，所以他们需要一种方法来创建其他人无法复制的密钥。</p><p>首先，Alice和Bob就曲线$E$、素数$p$和生成点$G$达成一致，生成素数阶$q$的子群$H&#x3D;⟨G⟩$</p><blockquote><p>在椭圆曲线密码学中，$G$的阶是素数是很重要的。构建安全曲线很复杂，建议使用预先构建的曲线，其中客户端会得到要使用的曲线、素数和生成器。</p></blockquote><p>椭圆曲线Diffie-Hellman密钥交换过程如下：</p><ul><li>Alice生成一个随机秘密整数$n_A$并计算$Q_A&#x3D;[n_A]G$</li><li>Bob生成一个随机秘密整数$n_B$并计算$Q_B&#x3D;[n_B]G$</li><li>Alice将$Q_A$发送给Bob，Bob将$Q_B$发送给Alice。由于ECDLP问题的难度，旁观者Eve无法在有效时间内计算$n_{A&#x2F;B}$</li><li>Alice计算$[n_A]Q_B$，Bob计算$[n_B]Q_A$</li><li>由标量乘法的可结合性，$S&#x3D;[n_A]Q_B&#x3D;[n_B]Q_A$</li><li>Alice和Bob能够使用$S$作为他们的共享秘密</li></ul><p>使用曲线、素数和生成器：<br>$$<br>E:Y^2&#x3D;X^3+497X+1768<del>mod</del>9739,~~G:(1804,5368)<br>$$<br>当Alice发送给你$Q_A&#x3D;(815,3190)$后，用你的秘密整数$n_B&#x3D;1829$计算共享秘密。</p><p>通过计算$x$坐标的SHA1哈希生成密钥（取坐标的整数表示并将其转换为字符串）。flag就是你找到的十六进制摘要。</p><blockquote><p>这条曲线不是加密安全的！！我们为这些初学者挑战选择了一个小素数，以便在学习时保持一切快速。加密安全曲线具有比特大小≈256的素数</p></blockquote><h4 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> GF</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, p</span>):</span><br><span class="line">        F = GF(p) <span class="comment"># 定义有限域</span></span><br><span class="line">        <span class="comment"># 让x,y在有限域内运算</span></span><br><span class="line">        <span class="variable language_">self</span>.x = F(x)</span><br><span class="line">        <span class="variable language_">self</span>.y = F(y)</span><br><span class="line">        <span class="variable language_">self</span>.modulus = p <span class="comment"># 模数</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition</span>(<span class="params">p1: Point, p2: Point, a, b</span>):</span><br><span class="line">    x1 = p1.x</span><br><span class="line">    y1 = p1.y</span><br><span class="line">    x2 = p2.x</span><br><span class="line">    y2 = p2.y</span><br><span class="line">    <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 == y2: <span class="comment"># 如果P,Q重合</span></span><br><span class="line">        d = (<span class="number">3</span>*x1**<span class="number">2</span> + a) / (<span class="number">2</span>*y1)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># P,Q为不同两点</span></span><br><span class="line">        d = (y2 - y1) / (x2 - x1)</span><br><span class="line">    x = d**<span class="number">2</span> - x1 - x2</span><br><span class="line">    y = d*(x1 - x) - y1</span><br><span class="line">    <span class="keyword">return</span> Point(x, y, p1.modulus)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Scalar_Multiplication</span>(<span class="params">p: Point, n, a, b</span>):</span><br><span class="line">    q = p</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = addition(r, q, a, b)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                r = q</span><br><span class="line">        q = addition(q, q, a, b)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">qa = Point(<span class="number">815</span>, <span class="number">3190</span>, <span class="number">9739</span>)</span><br><span class="line">s = Scalar_Multiplication(qa, <span class="number">1829</span>, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line">x_str = <span class="built_in">str</span>(s.x)</span><br><span class="line">hash_object = hashlib.sha1(x_str.encode())</span><br><span class="line">sha1_hash = hash_object.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;crypto&#123;&#x27;</span> + sha1_hash + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># crypto&#123;80e5212754a824d3a4aed185ace4f9cac0f908bf&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Efficient-Exchange"><a href="#Efficient-Exchange" class="headerlink" title="Efficient Exchange"></a>Efficient Exchange</h3><p>Alice和Bob正在研究椭圆曲线离散对数问题，并思考他们发送的数据。</p><p>他们希望尽可能保持数据传输的效率，并意识到不需要同时发送公钥的$x$和$y$坐标。</p><p>只要Alice和Bob在曲线参数上达成一致，对于给定的$x$，$y$只有两个可能的值。</p><p>事实上，给定他们接收到的$x$值中允许的$y$值，他们共享秘密的$x$坐标将是相同的。</p><blockquote><p>对于这些挑战，我们使用了素数$p≡3<del>mod</del>4$，这将帮助你从$y^2$中找到y</p></blockquote><p>使用曲线、素数和生成器：<br>$$<br>E:Y^2&#x3D;X^3+497X+1768<del>mod</del>9739,~~G:(1804,5368)<br>$$<br>在Alice发送给你$x(Q_A)&#x3D;4726$后用你的秘密整数$n_B&#x3D;6534$计算出共享秘密值。</p><p>使用<code>decrypt.py</code>文件来解码flag</p><blockquote><p>{‘iv’: ‘cd9da9f1c60925922377ea952afc212c’, ‘encrypted_flag’: ‘febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8’}</p></blockquote><blockquote><p>您可以通过只发送一个位来指定公共$y$坐标取了两个可能值中的哪一个。试着想想如何做到这一点。这两个$y$值是如何相互关联的？</p></blockquote><h4 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> GF</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> sqrt_mod</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, p</span>):</span><br><span class="line">        F = GF(p) <span class="comment"># 定义有限域</span></span><br><span class="line">        <span class="comment"># 让x,y在有限域内运算</span></span><br><span class="line">        <span class="variable language_">self</span>.x = F(x)</span><br><span class="line">        <span class="variable language_">self</span>.y = F(y)</span><br><span class="line">        <span class="variable language_">self</span>.modulus = p <span class="comment"># 模数</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition</span>(<span class="params">p1: Point, p2: Point, a, b</span>):</span><br><span class="line">    x1 = p1.x</span><br><span class="line">    y1 = p1.y</span><br><span class="line">    x2 = p2.x</span><br><span class="line">    y2 = p2.y</span><br><span class="line">    <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 == y2: <span class="comment"># 如果P,Q重合</span></span><br><span class="line">        d = (<span class="number">3</span>*x1**<span class="number">2</span> + a) / (<span class="number">2</span>*y1)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># P,Q为不同两点</span></span><br><span class="line">        d = (y2 - y1) / (x2 - x1)</span><br><span class="line">    x = d**<span class="number">2</span> - x1 - x2</span><br><span class="line">    y = d*(x1 - x) - y1</span><br><span class="line">    <span class="keyword">return</span> Point(x, y, p1.modulus)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Scalar_Multiplication</span>(<span class="params">p: Point, n, a, b</span>):</span><br><span class="line">    q = p</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = addition(r, q, a, b)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                r = q</span><br><span class="line">        q = addition(q, q, a, b)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">x = <span class="number">4726</span></span><br><span class="line">n_b = <span class="number">6534</span></span><br><span class="line"></span><br><span class="line">[y1,y2] = sqrt_mod(x**<span class="number">3</span> + <span class="number">497</span>*x + <span class="number">1768</span>, <span class="number">9739</span>, <span class="literal">True</span>)</span><br><span class="line">p1 = Point(x, y1, <span class="number">9739</span>)</span><br><span class="line">p2 = Point(x, y2, <span class="number">9739</span>)</span><br><span class="line">a1 = Scalar_Multiplication(p1, n_b, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line">a2 = Scalar_Multiplication(p2, n_b, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line"><span class="built_in">print</span>(a1.x, a1.y, a2.x, a2.y)</span><br><span class="line"><span class="comment"># 1791 7558 1791 2181</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_pkcs7_padded</span>(<span class="params">message</span>):</span><br><span class="line">    padding = message[-message[-<span class="number">1</span>]:]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(padding[i] == <span class="built_in">len</span>(padding) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(padding)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">shared_secret: <span class="built_in">int</span>, iv: <span class="built_in">str</span>, ciphertext: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="comment"># Derive AES key from shared secret</span></span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(<span class="built_in">str</span>(shared_secret).encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    key = sha1.digest()[:<span class="number">16</span>]</span><br><span class="line">    <span class="comment"># Decrypt flag</span></span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line">    iv = <span class="built_in">bytes</span>.fromhex(iv)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_pkcs7_padded(plaintext):</span><br><span class="line">        <span class="keyword">return</span> unpad(plaintext, <span class="number">16</span>).decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> plaintext.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shared_secret = <span class="number">1791</span></span><br><span class="line">iv = <span class="string">&#x27;cd9da9f1c60925922377ea952afc212c&#x27;</span></span><br><span class="line">ciphertext = <span class="string">&#x27;febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypt_flag(shared_secret, iv, ciphertext))</span><br><span class="line"><span class="comment"># crypto&#123;3ff1c1ent_k3y_3xch4ng3&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cryptohack-ELLIPTIC CURVES</title>
      <link href="/2024/11/22/ELLIPTIC_CURVES_Pics/"/>
      <url>/2024/11/22/ELLIPTIC_CURVES_Pics/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="CRYPTOHACK-ELLIPTIC-CURVES"><a href="#CRYPTOHACK-ELLIPTIC-CURVES" class="headerlink" title="CRYPTOHACK-ELLIPTIC CURVES"></a>CRYPTOHACK-ELLIPTIC CURVES</h1><h2 id="BACKGROUND"><a href="#BACKGROUND" class="headerlink" title="BACKGROUND"></a>BACKGROUND</h2><p>椭圆曲线在公钥密码学中的应用最早于1985年提出，在抵御了数十年的攻击后，从2005年左右开始被广泛使用。椭圆曲线密码学（ECC）是一种非对称密码协议，与RSA和Diffie-Hellman（DH）一样，安全性依赖于单向陷门函数的难度。但是ECC有一个优势就是其操作流程并不像RSA和DH的乘法、取数字幂一样在平时生活中经常出现。</p><h3 id="椭圆曲线基本介绍"><a href="#椭圆曲线基本介绍" class="headerlink" title="椭圆曲线基本介绍"></a>椭圆曲线基本介绍</h3><p>椭圆曲线的<strong>基本形式</strong>如下</p><p><img src="https://cdn.nlark.com/yuque/__latex/6915579a96ee79cc9ea3b6509eeb4ab0.svg"></p><p>它有一个很重要的特性是“点加”，这种运算在某条曲线上取两个点，并在原曲线上产生第三个点。取椭圆曲线上的点集后，点加法可以定义一个阿贝尔（Abelian）群运算。</p><p>从几何上讲，点加法就是取一个椭圆曲线并沿曲线标记两点<img src="https://cdn.nlark.com/yuque/__latex/ffd1905f6d4d60accedfa6b91be93ea9.svg">，<img src="https://cdn.nlark.com/yuque/__latex/4ef7132d0df72d9e3db76f6391960a3d.svg">及其<img src="https://cdn.nlark.com/yuque/__latex/712ecf7894348e92d8779c3ee87eeeb0.svg">，<img src="https://cdn.nlark.com/yuque/__latex/bf98c0ddcbe9c1e535f767c78c3aa813.svg">坐标，画一条穿过两个点的直线。现在延长这条线使其与椭圆曲线第三次相交，标记这个新的交点<img src="https://cdn.nlark.com/yuque/__latex/dd1caa3f2e1582dab2cf9bfdb21b7556.svg">。最后取<img src="https://cdn.nlark.com/yuque/__latex/dd1caa3f2e1582dab2cf9bfdb21b7556.svg">关于y轴对称，得到点<img src="https://cdn.nlark.com/yuque/__latex/218e4e95aac30adc09caaf9a08b70d50.svg"></p><p><img src="https://cdn.nlark.com/yuque/__latex/5da8fae3e28265a22130d557580db556.svg"></p><p>如果没有第三个交点时，我们认为这条线与一个位于无穷远处的垂直线末端的一个点<img src="https://cdn.nlark.com/yuque/__latex/a946bfe2d39be198589a4de189e0f670.svg">相交，所以椭圆曲线的点加法是在2D空间中定义的，其中一个附加点位于无穷远处。</p><p>下面展示一个理解这些不同情况的视觉辅助图</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241118164305997.png"></p><p>点<img src="https://cdn.nlark.com/yuque/__latex/a946bfe2d39be198589a4de189e0f670.svg">充当组中的恒等算子</p><p><img src="https://cdn.nlark.com/yuque/__latex/42c448cfd43e644c4d37be0f08193cb1.svg"></p><p><strong>定义</strong>：椭圆曲线E是Weierstrass方程的解集</p><p><img src="https://cdn.nlark.com/yuque/__latex/6915579a96ee79cc9ea3b6509eeb4ab0.svg"></p><p>与无穷远处的一个点<img src="https://cdn.nlark.com/yuque/__latex/a946bfe2d39be198589a4de189e0f670.svg">。参数<img src="https://cdn.nlark.com/yuque/__latex/26fdbf8e53cb0e48da5f4ddd4aaf5a5c.svg">,<img src="https://cdn.nlark.com/yuque/__latex/d29c2e5f4926e5b0e9a95305650f6e54.svg">必须满足下述关系</p><p><img src="https://cdn.nlark.com/yuque/__latex/266b4b4d8fbaffb46235d541b29bf493.svg"></p><p>以确保曲线上没有奇点。</p><p>形式上，设<img src="https://cdn.nlark.com/yuque/__latex/321138a59e6eab0c97c21f05282a80a6.svg">为椭圆曲线，点加法具有以下性质</p><blockquote><p>(a) P+O&#x3D;O+P&#x3D;P</p><p>(b) P+(-P)&#x3D;O</p><p>(c) (P+Q)+R&#x3D;P+(Q+R)</p><p>(d) P+Q&#x3D;Q+P</p></blockquote><p>在ECC中，我们研究有限域<img src="https://cdn.nlark.com/yuque/__latex/2289da1c86fb8362509135e96803bc02.svg">上的椭圆曲线。这意味着我们观察曲线对特征<img src="https://cdn.nlark.com/yuque/__latex/d4cd21d60552e207f237e82def9029b6.svg">的模，椭圆曲线将不再是曲线，而是一组<img src="https://cdn.nlark.com/yuque/__latex/5963837d99a8fcf1d9c5f7807a096f47.svg">坐标为<img src="https://cdn.nlark.com/yuque/__latex/2289da1c86fb8362509135e96803bc02.svg">中整数的点。</p><h3 id="椭圆曲线的离散对数问题"><a href="#椭圆曲线的离散对数问题" class="headerlink" title="椭圆曲线的离散对数问题"></a>椭圆曲线的离散对数问题</h3><p>给定一个椭圆曲线<img src="https://cdn.nlark.com/yuque/__latex/321138a59e6eab0c97c21f05282a80a6.svg">，<img src="https://cdn.nlark.com/yuque/__latex/321138a59e6eab0c97c21f05282a80a6.svg">上的一点<img src="https://cdn.nlark.com/yuque/__latex/ffd1905f6d4d60accedfa6b91be93ea9.svg">经过了<img src="https://cdn.nlark.com/yuque/__latex/56c1b0cb7a48ccf9520b0adb3c8cb2e8.svg">次点加法后得到<img src="https://cdn.nlark.com/yuque/__latex/1553dae3cc5c15cddb4f5b5a367b0aba.svg" alt="image">，现已知<img src="https://cdn.nlark.com/yuque/__latex/a9d8e7493ba3c1770ad1d78b01b8c21c.svg">，求出<img src="https://cdn.nlark.com/yuque/__latex/56c1b0cb7a48ccf9520b0adb3c8cb2e8.svg" alt="image"></p><p>这是椭圆曲线密码学主要解决的一个困难数学问题。</p><blockquote><p>ps: 这段是目前个人的理解</p><p>其中在实际应用场景中，<img src="https://cdn.nlark.com/yuque/__latex/1553dae3cc5c15cddb4f5b5a367b0aba.svg" alt="image">为公钥，<img src="https://cdn.nlark.com/yuque/__latex/ffd1905f6d4d60accedfa6b91be93ea9.svg" alt="image">为一个随机生成点（应该是？），<img src="https://cdn.nlark.com/yuque/__latex/56c1b0cb7a48ccf9520b0adb3c8cb2e8.svg" alt="image">为所需求的私钥</p></blockquote><h3 id="Background-Reading"><a href="#Background-Reading" class="headerlink" title="Background Reading"></a>Background Reading</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>性质<img src="https://cdn.nlark.com/yuque/__latex/c3775e4800cb1a5b160985845315c7b3.svg" alt="image">表明点加法是可交换的。flag是给具有交换运算的群起的名字。</p><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><p>crypto{Abelian}</p><h2 id="STARTER"><a href="#STARTER" class="headerlink" title="STARTER"></a>STARTER</h2><h3 id="Point-Negation"><a href="#Point-Negation" class="headerlink" title="Point Negation"></a>Point Negation</h3><p>在密码学环境中应用椭圆曲线，需要研究在有限域<img src="https://cdn.nlark.com/yuque/__latex/2289da1c86fb8362509135e96803bc02.svg" alt="image">中具有坐标的椭圆曲线。</p><p>仍然可以认为椭圆曲线的形式为<img src="https://cdn.nlark.com/yuque/__latex/d13d84a2d52ce2a3ad72d2d9cdd9f156.svg" alt="image">，并满足以下条件：<img src="https://cdn.nlark.com/yuque/__latex/d0e8a63d95be149921385891bbfeee83.svg" alt="image"></p><p>但不再将椭圆曲线看作一个几何对象，而是一组被如下定义的点</p><p><img src="https://cdn.nlark.com/yuque/__latex/5c6d5d58296750f2a8fcc4eb0ccbc6bf.svg" alt="image"></p><p>当把<img src="https://cdn.nlark.com/yuque/__latex/321138a59e6eab0c97c21f05282a80a6.svg" alt="image">放入有限域后，椭圆曲线就不再是一条光滑曲线，而是一些不连续的点。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241118181201117.png"></p><p>图来自<a href="https://andrea.corbellini.name/ecc/interactive/modk-add.html">一个可绘制椭圆曲线的网站</a></p><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>使用椭圆曲线</p><p><img src="https://cdn.nlark.com/yuque/__latex/82b46db47da5d259a75f96ed120acc9b.svg" alt="image"></p><p>使用该曲线和点<img src="https://cdn.nlark.com/yuque/__latex/0c77dd51656ad3521c3ef9b114fc65a2.svg" alt="image">，找到点<img src="https://cdn.nlark.com/yuque/__latex/9291c98793027f924d519191814fb23d.svg" alt="image">使得<img src="https://cdn.nlark.com/yuque/__latex/841f0d6ad341591d5fa39d5dca3cf354.svg" alt="image"></p><p>hint：在有限域中工作，需要正确处理负数。</p><h4 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h4><p><img src="https://cdn.nlark.com/yuque/__latex/841f0d6ad341591d5fa39d5dca3cf354.svg">，可知<img src="https://cdn.nlark.com/yuque/__latex/4ef7132d0df72d9e3db76f6391960a3d.svg">的<img src="https://cdn.nlark.com/yuque/__latex/712ecf7894348e92d8779c3ee87eeeb0.svg">为8045，<img src="https://cdn.nlark.com/yuque/__latex/bf98c0ddcbe9c1e535f767c78c3aa813.svg">为-6939，由提示处理负数，将-6939对9739取模得到2803。</p><h4 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h4><p>crypto{8045,2803}</p><h3 id="Point-Addition"><a href="#Point-Addition" class="headerlink" title="Point Addition"></a>Point Addition</h3><p>在椭圆曲线密码学的使用过程中，经常需要用到点加法，本题考查的就是点加法。</p><p>题目给出了如下实现算法</p><blockquote><p><strong>两点的点加法算法：</strong><img src="https://cdn.nlark.com/yuque/__latex/1a6e58161705e6317b8cd54d96e13a40.svg"></p><p>(a) 如果<img src="https://cdn.nlark.com/yuque/__latex/9fc50fef19e65d3668107d5b4d70003d.svg">，那么<img src="https://cdn.nlark.com/yuque/__latex/033e0cb0e624116b8ac16a69e9fc6232.svg"></p><p>(b) 否则，如果<img src="https://cdn.nlark.com/yuque/__latex/877bf505150ff3e3be26d1be5a3e0201.svg">，那么<img src="https://cdn.nlark.com/yuque/__latex/70f52501a6c486f9ca9303202601f5e7.svg"></p><p>(c) 否则，记<img src="https://cdn.nlark.com/yuque/__latex/592c4815258d677657b61c64bcaa756f.svg"></p><p>(d) 如果<img src="https://cdn.nlark.com/yuque/__latex/24ac71930b9317f2ac76dc6bdd4ff5a9.svg">，那么<img src="https://cdn.nlark.com/yuque/__latex/841f0d6ad341591d5fa39d5dca3cf354.svg"></p><p>(e) 否则：</p><p>(e1) 如果<img src="https://cdn.nlark.com/yuque/__latex/7db3d59aac539aae8654949cf6bc617e.svg"></p><p>(e2) 如果<img src="https://cdn.nlark.com/yuque/__latex/06821c39e39b03fbf726815a43206b2f.svg"></p><p>(f) <img src="https://cdn.nlark.com/yuque/__latex/1751d943a4b4191ecbfb732aceaabbdf.svg"></p><p>(g) <img src="https://cdn.nlark.com/yuque/__latex/95e8081ae4b77420a011aa7187569a6b.svg"></p><p>(h) <img src="https://cdn.nlark.com/yuque/__latex/1423457c509f211613a5bceedcb05ae7.svg"></p></blockquote><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>使用以下椭圆曲线和素数：</p><p><img src="https://cdn.nlark.com/yuque/__latex/82b46db47da5d259a75f96ed120acc9b.svg"></p><blockquote><p>可以通过以下等式来测试算法正确性：<img src="https://cdn.nlark.com/yuque/__latex/d7a8b3928f640ce760dbb5b2540ab279.svg"></p></blockquote><p>使用该曲线和点<img src="https://cdn.nlark.com/yuque/__latex/b6be852ba958d386d4107f7e39619c5f.svg">，通过实现上述算法找到点<img src="https://cdn.nlark.com/yuque/__latex/517575dac15081d19d2a7ff5a913a0e3.svg"></p><blockquote><p>在计算完<img src="https://cdn.nlark.com/yuque/__latex/55fc237afbe535f7d8434985b848a6a7.svg">后，将坐标代入曲线以确保点<img src="https://cdn.nlark.com/yuque/__latex/55fc237afbe535f7d8434985b848a6a7.svg">在<img src="https://cdn.nlark.com/yuque/__latex/59496f18e8d7960318929ac8ac17abfa.svg">上</p></blockquote><h4 id="WriteUp-1"><a href="#WriteUp-1" class="headerlink" title="WriteUp"></a>WriteUp</h4><p>根据所给出的算法流程构建<code>addition(p1: Point, p2: Point, a, b)</code>函数，并测试算法正确性之后计算点加和，最后确定<img src="https://cdn.nlark.com/yuque/__latex/55fc237afbe535f7d8434985b848a6a7.svg">在<img src="https://cdn.nlark.com/yuque/__latex/59496f18e8d7960318929ac8ac17abfa.svg">上。</p><h4 id="EXP-flag"><a href="#EXP-flag" class="headerlink" title="EXP&amp;flag"></a>EXP&amp;flag</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> GF</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, p</span>):</span><br><span class="line">        F = GF(p) <span class="comment"># 定义有限域</span></span><br><span class="line">        <span class="comment"># 让x,y在有限域内运算</span></span><br><span class="line">        <span class="variable language_">self</span>.x = F(x)</span><br><span class="line">        <span class="variable language_">self</span>.y = F(y)</span><br><span class="line">        <span class="variable language_">self</span>.modulus = p <span class="comment"># 模数</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition</span>(<span class="params">p1: Point, p2: Point, a, b</span>):</span><br><span class="line">    x1 = p1.x</span><br><span class="line">    y1 = p1.y</span><br><span class="line">    x2 = p2.x</span><br><span class="line">    y2 = p2.y</span><br><span class="line">    <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 == y2: <span class="comment"># 如果P,Q重合</span></span><br><span class="line">        d = (<span class="number">3</span>*x1**<span class="number">2</span> + a) / (<span class="number">2</span>*y1)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># P,Q为不同两点</span></span><br><span class="line">        d = (y2 - y1) / (x2 - x1)</span><br><span class="line">    x = d**<span class="number">2</span> - x1 - x2</span><br><span class="line">    y = d*(x1 - x) - y1</span><br><span class="line">    <span class="keyword">return</span> Point(x, y, p1.modulus)</span><br><span class="line"></span><br><span class="line">X = Point(<span class="number">5274</span>, <span class="number">2841</span>, <span class="number">9739</span>)</span><br><span class="line">Y = Point(<span class="number">8669</span>, <span class="number">740</span>, <span class="number">9739</span>)</span><br><span class="line">XY = Point(<span class="number">1024</span>, <span class="number">4440</span>, <span class="number">9739</span>)</span><br><span class="line">XX = Point(<span class="number">7284</span>, <span class="number">2107</span>, <span class="number">9739</span>)</span><br><span class="line"><span class="comment"># 确定addition函数正确性</span></span><br><span class="line"><span class="keyword">assert</span> addition(X, Y, <span class="number">497</span>, <span class="number">1768</span>).x == XY.x <span class="keyword">and</span> addition(X, Y, <span class="number">497</span>, <span class="number">1768</span>).y == XY.y</span><br><span class="line"><span class="keyword">assert</span> addition(X, X, <span class="number">497</span>, <span class="number">1768</span>).x == XX.x <span class="keyword">and</span> addition(X, X, <span class="number">497</span>, <span class="number">1768</span>).y == XX.y</span><br><span class="line">P = Point(<span class="number">493</span>, <span class="number">5564</span>, <span class="number">9739</span>)</span><br><span class="line">Q = Point(<span class="number">1539</span>, <span class="number">4742</span>, <span class="number">9739</span>)</span><br><span class="line">R = Point(<span class="number">4403</span>, <span class="number">5202</span>, <span class="number">9739</span>)</span><br><span class="line">x1 = addition(P, P, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line">x2 = addition(x1, Q, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line">S = addition(x2, R, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line"><span class="comment"># 确定所求点S在椭圆曲线E上</span></span><br><span class="line"><span class="keyword">assert</span> S.y**<span class="number">2</span> == x3.x**<span class="number">3</span> + <span class="number">497</span>*S.x + <span class="number">1768</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;crypto&#123;&#x27;</span>+<span class="built_in">str</span>(S.x)+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(S.y)+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># crypto&#123;4215,2162&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Scalar-Multiplication"><a href="#Scalar-Multiplication" class="headerlink" title="Scalar Multiplication"></a>Scalar Multiplication</h3><p>两点的标量乘法由重复加法定义：<img src="https://cdn.nlark.com/yuque/__latex/21ef8cf78c81eaffc73a65e792f16a93.svg"></p><p>本题也给出了如下实现算法</p><blockquote><p><strong>标量乘法的二重加法算法</strong></p><p>输入：<img src="https://cdn.nlark.com/yuque/__latex/269a6b7fcf9e0065815017d4fdb581ff.svg">和一个整数<img src="https://cdn.nlark.com/yuque/__latex/1e08bbdd41f0ec72b310f7b8d0673b25.svg"></p><p>输出：<img src="https://cdn.nlark.com/yuque/__latex/535926ca544d11a3c7d4b8cfc828539e.svg"></p><ol><li>设<img src="https://cdn.nlark.com/yuque/__latex/9faa6f10971e95359ec2b660899d422d.svg"></li><li>while循环 n &gt; 0</li><li>如果<img src="https://cdn.nlark.com/yuque/__latex/b5d81293ce1841cdcb4ab58b38717308.svg">，设<img src="https://cdn.nlark.com/yuque/__latex/1d29473f7b51df4e7f2a61ffdda2ea88.svg"></li><li>设<img src="https://cdn.nlark.com/yuque/__latex/5446ed96669137534506553976fb937a.svg"></li><li>如果<img src="https://cdn.nlark.com/yuque/__latex/1e08bbdd41f0ec72b310f7b8d0673b25.svg">，继续第二步循环</li><li>返回点<img src="https://cdn.nlark.com/yuque/__latex/58f174354f8b28abc98969927d94c7f1.svg"></li></ol></blockquote><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>使用以下椭圆曲线和素数：</p><p><img src="https://cdn.nlark.com/yuque/__latex/82b46db47da5d259a75f96ed120acc9b.svg"></p><blockquote><p>可以通过以下等式来测试算法准确性：</p><p><img src="https://cdn.nlark.com/yuque/__latex/5f0058648f9ab852425fdad4b22ea056.svg"></p></blockquote><p>使用该曲线和点<img src="https://cdn.nlark.com/yuque/__latex/957862bd685f87bafe8b2cc349d28643.svg">，通过实现上述算法找到点<img src="https://cdn.nlark.com/yuque/__latex/698e80cebb23a3e3acc33562f4111751.svg"></p><blockquote><p>在计算完<img src="https://cdn.nlark.com/yuque/__latex/4ef7132d0df72d9e3db76f6391960a3d.svg">后，将坐标代入曲线以确保点<img src="https://cdn.nlark.com/yuque/__latex/4ef7132d0df72d9e3db76f6391960a3d.svg">在<img src="https://cdn.nlark.com/yuque/__latex/59496f18e8d7960318929ac8ac17abfa.svg">上</p></blockquote><h4 id="WriteUp-2"><a href="#WriteUp-2" class="headerlink" title="WriteUp"></a>WriteUp</h4><p>同上题，根据所给出的算法流程构建<code>Scalar_Multiplication(p: Point, n, a, b)</code>函数，并测试算法正确性之后计算点<img src="https://cdn.nlark.com/yuque/__latex/4ef7132d0df72d9e3db76f6391960a3d.svg">，最后确定<img src="https://cdn.nlark.com/yuque/__latex/4ef7132d0df72d9e3db76f6391960a3d.svg">在<img src="https://cdn.nlark.com/yuque/__latex/59496f18e8d7960318929ac8ac17abfa.svg">上。</p><h4 id="EXP-flag-1"><a href="#EXP-flag-1" class="headerlink" title="EXP&amp;flag"></a>EXP&amp;flag</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> GF</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, p</span>):</span><br><span class="line">        F = GF(p) <span class="comment"># 定义有限域</span></span><br><span class="line">        <span class="comment"># 让x,y在有限域内运算</span></span><br><span class="line">        <span class="variable language_">self</span>.x = F(x)</span><br><span class="line">        <span class="variable language_">self</span>.y = F(y)</span><br><span class="line">        <span class="variable language_">self</span>.modulus = p <span class="comment"># 模数</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition</span>(<span class="params">p1: Point, p2: Point, a, b</span>):</span><br><span class="line">    x1 = p1.x</span><br><span class="line">    y1 = p1.y</span><br><span class="line">    x2 = p2.x</span><br><span class="line">    y2 = p2.y</span><br><span class="line">    <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 == y2: <span class="comment"># 如果P,Q重合</span></span><br><span class="line">        d = (<span class="number">3</span>*x1**<span class="number">2</span> + a) / (<span class="number">2</span>*y1)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># P,Q为不同两点</span></span><br><span class="line">        d = (y2 - y1) / (x2 - x1)</span><br><span class="line">    x = d**<span class="number">2</span> - x1 - x2</span><br><span class="line">    y = d*(x1 - x) - y1</span><br><span class="line">    <span class="keyword">return</span> Point(x, y, p1.modulus)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Scalar_Multiplication</span>(<span class="params">p: Point, n, a, b</span>):</span><br><span class="line">    q = p</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = addition(r, q, a, b)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                r = q</span><br><span class="line">        q = addition(q, q, a, b)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定Scalar_Multiplication函数正确性</span></span><br><span class="line">X = Point(<span class="number">5323</span>, <span class="number">5438</span>, <span class="number">9739</span>)</span><br><span class="line"><span class="keyword">assert</span> Scalar_Multiplication(X, <span class="number">1337</span>, <span class="number">497</span>, <span class="number">1768</span>).x == <span class="number">1089</span></span><br><span class="line"><span class="keyword">assert</span> Scalar_Multiplication(X, <span class="number">1337</span>, <span class="number">497</span>, <span class="number">1768</span>).y == <span class="number">6931</span></span><br><span class="line">p = Point(<span class="number">2339</span>, <span class="number">2213</span>, <span class="number">9739</span>)</span><br><span class="line">Q = Scalar_Multiplication(p, <span class="number">7863</span>, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line"><span class="comment"># 确定点S在曲线上</span></span><br><span class="line"><span class="keyword">assert</span> Q.y**<span class="number">2</span> == Q.x**<span class="number">3</span> + <span class="number">497</span>*Q.x + <span class="number">1768</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;crypto&#123;&#x27;</span> + <span class="built_in">str</span>(Q.x) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(Q.y) + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># crypto&#123;9467,2742&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Curves-and-Logs"><a href="#Curves-and-Logs" class="headerlink" title="Curves and Logs"></a>Curves and Logs</h3><p>椭圆曲线离散对数问题（ECDLP）是找到一个整数<img src="https://cdn.nlark.com/yuque/__latex/df378375e7693bdcf9535661c023c02e.svg">，使得<img src="https://cdn.nlark.com/yuque/__latex/c93d4c9fb8f43b5f75e185d89f1aa7eb.svg">的问题，也是椭圆曲线密码学中一个核心问题。</p><p>Alice和Bob正在交谈，他们想创建一个共享密钥，这样他们就可以开始用一些对称的加密协议加密他们的消息。Alice和Bob不信任他们的连接，所以他们需要一种方法来创建其他人无法复制的密钥。</p><p>首先，Alice和Bob就曲线<img src="https://cdn.nlark.com/yuque/__latex/321138a59e6eab0c97c21f05282a80a6.svg">、素数<img src="https://cdn.nlark.com/yuque/__latex/d4cd21d60552e207f237e82def9029b6.svg">和生成点<img src="https://cdn.nlark.com/yuque/__latex/f8df64a4bfdeb9bdcbc357668b6fb123.svg">达成一致，生成素数阶<img src="https://cdn.nlark.com/yuque/__latex/34c7b563b30bde3c748139530686798e.svg">的子群<img src="https://cdn.nlark.com/yuque/__latex/3d8022f4e225d2804673d5988ea369bd.svg"></p><blockquote><p>在椭圆曲线密码学中，<img src="https://cdn.nlark.com/yuque/__latex/f8df64a4bfdeb9bdcbc357668b6fb123.svg">的阶是素数是很重要的。构建安全曲线很复杂，建议使用预先构建的曲线，其中客户端会得到要使用的曲线、素数和生成器。</p></blockquote><p>椭圆曲线Diffie-Hellman密钥交换过程如下：</p><ul><li>Alice生成一个随机秘密整数<img src="https://cdn.nlark.com/yuque/__latex/6f5011d8226f21ce9f00804d8bb18efd.svg">并计算<img src="https://cdn.nlark.com/yuque/__latex/aceeb7446739114b43252070ced979ff.svg"></li><li>Bob生成一个随机秘密整数<img src="https://cdn.nlark.com/yuque/__latex/55edb6f83635d53d5475e93b605120d9.svg">并计算<img src="https://cdn.nlark.com/yuque/__latex/d082a3e0de2cae75b987db7cee8f56ec.svg"></li><li>Alice将<img src="https://cdn.nlark.com/yuque/__latex/1d6b573c5cee427fa483de482fce0e09.svg">发送给Bob，Bob将<img src="https://cdn.nlark.com/yuque/__latex/b59676b3246575fe91046496a22e2f44.svg">发送给Alice。由于ECDLP问题的难度，旁观者Eve无法在有效时间内计算<img src="https://cdn.nlark.com/yuque/__latex/ef9618d6fda249e412a84f8dcd19090a.svg"></li><li>Alice计算<img src="https://cdn.nlark.com/yuque/__latex/017e5dbe94db3fd589fc0ca860bf2bdd.svg">，Bob计算<img src="https://cdn.nlark.com/yuque/__latex/fcea90a36d329b36d2088e2f16aa0698.svg"></li><li>由标量乘法的可结合性，<img src="https://cdn.nlark.com/yuque/__latex/27001ad7c2b2618a1c40c88560666d28.svg"></li><li>Alice和Bob能够使用<img src="https://cdn.nlark.com/yuque/__latex/55fc237afbe535f7d8434985b848a6a7.svg">作为他们的共享秘密</li></ul><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><p>使用曲线、素数和生成器：</p><p><img src="https://cdn.nlark.com/yuque/__latex/632e6dc50784914133d53141515e8844.svg"></p><p>当Alice发送给你<img src="https://cdn.nlark.com/yuque/__latex/75b5571be2530a18f9347b09c48c3abd.svg">后，用你的秘密整数<img src="https://cdn.nlark.com/yuque/__latex/2d76340644346e2ba3b6196be0879882.svg">计算共享秘密。</p><p>通过计算<img src="https://cdn.nlark.com/yuque/__latex/712ecf7894348e92d8779c3ee87eeeb0.svg">坐标的SHA1哈希生成密钥（取坐标的整数表示并将其转换为字符串）。flag就是你找到的十六进制摘要。</p><blockquote><p>这条曲线并非不是加密安全的！！本题选择了一个小素数，以便在学习时保持一切快速。加密安全曲线使用比特大小≈256的素数</p></blockquote><h4 id="WriteUp-3"><a href="#WriteUp-3" class="headerlink" title="WriteUp"></a>WriteUp</h4><p>和DH类似，椭圆曲线DH密钥交换过程如下公式</p><p><img src="https://cdn.nlark.com/yuque/__latex/07001b9c28705e306c0717b18c021f9d.svg"></p><p>题目已经给出<img src="https://cdn.nlark.com/yuque/__latex/1d6b573c5cee427fa483de482fce0e09.svg">和<img src="https://cdn.nlark.com/yuque/__latex/55edb6f83635d53d5475e93b605120d9.svg">，直接用前面的标量乘法函数求解<img src="https://cdn.nlark.com/yuque/__latex/1d7af5368c17853932a09a6ba891b9e4.svg">即可，解得<img src="https://cdn.nlark.com/yuque/__latex/55fc237afbe535f7d8434985b848a6a7.svg">后将<img src="https://cdn.nlark.com/yuque/__latex/ff19ce66179d022e787690c98ab7fd63.svg">转换为字符串并用SHA1生成十六进制摘要得到flag。</p><h4 id="EXP-flag-2"><a href="#EXP-flag-2" class="headerlink" title="EXP&amp;flag"></a>EXP&amp;flag</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> GF</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, p</span>):</span><br><span class="line">        F = GF(p) <span class="comment"># 定义有限域</span></span><br><span class="line">        <span class="comment"># 让x,y在有限域内运算</span></span><br><span class="line">        <span class="variable language_">self</span>.x = F(x)</span><br><span class="line">        <span class="variable language_">self</span>.y = F(y)</span><br><span class="line">        <span class="variable language_">self</span>.modulus = p <span class="comment"># 模数</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition</span>(<span class="params">p1: Point, p2: Point, a, b</span>):</span><br><span class="line">    x1 = p1.x</span><br><span class="line">    y1 = p1.y</span><br><span class="line">    x2 = p2.x</span><br><span class="line">    y2 = p2.y</span><br><span class="line">    <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 == y2: <span class="comment"># 如果P,Q重合</span></span><br><span class="line">        d = (<span class="number">3</span>*x1**<span class="number">2</span> + a) / (<span class="number">2</span>*y1)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># P,Q为不同两点</span></span><br><span class="line">        d = (y2 - y1) / (x2 - x1)</span><br><span class="line">    x = d**<span class="number">2</span> - x1 - x2</span><br><span class="line">    y = d*(x1 - x) - y1</span><br><span class="line">    <span class="keyword">return</span> Point(x, y, p1.modulus)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Scalar_Multiplication</span>(<span class="params">p: Point, n, a, b</span>):</span><br><span class="line">    q = p</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = addition(r, q, a, b)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                r = q</span><br><span class="line">        q = addition(q, q, a, b)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">qa = Point(<span class="number">815</span>, <span class="number">3190</span>, <span class="number">9739</span>)</span><br><span class="line">s = Scalar_Multiplication(qa, <span class="number">1829</span>, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line">x_str = <span class="built_in">str</span>(s.x)</span><br><span class="line">hash_object = hashlib.sha1(x_str.encode())</span><br><span class="line">sha1_hash = hash_object.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;crypto&#123;&#x27;</span> + sha1_hash + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># crypto&#123;80e5212754a824d3a4aed185ace4f9cac0f908bf&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Efficient-Exchange"><a href="#Efficient-Exchange" class="headerlink" title="Efficient Exchange"></a>Efficient Exchange</h3><p>Alice和Bob正在研究椭圆曲线离散对数问题，并思考他们发送的数据。</p><p>他们希望尽可能保持数据传输的效率，并意识到不需要同时发送公钥的<img src="https://cdn.nlark.com/yuque/__latex/712ecf7894348e92d8779c3ee87eeeb0.svg">和<img src="https://cdn.nlark.com/yuque/__latex/bf98c0ddcbe9c1e535f767c78c3aa813.svg">坐标。</p><p>只要Alice和Bob在曲线参数上达成一致，对于给定的<img src="https://cdn.nlark.com/yuque/__latex/712ecf7894348e92d8779c3ee87eeeb0.svg">，<img src="https://cdn.nlark.com/yuque/__latex/bf98c0ddcbe9c1e535f767c78c3aa813.svg">只有两个可能的值。</p><p>事实上，给定他们接收到的<img src="https://cdn.nlark.com/yuque/__latex/712ecf7894348e92d8779c3ee87eeeb0.svg">值中允许的<img src="https://cdn.nlark.com/yuque/__latex/bf98c0ddcbe9c1e535f767c78c3aa813.svg">值，他们共享秘密的<img src="https://cdn.nlark.com/yuque/__latex/712ecf7894348e92d8779c3ee87eeeb0.svg">坐标将是相同的。</p><h4 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h4><p>使用曲线、素数和生成器：</p><p><img src="https://cdn.nlark.com/yuque/__latex/632e6dc50784914133d53141515e8844.svg"></p><p>在Alice发送给你<img src="https://cdn.nlark.com/yuque/__latex/ffe2239235f632fadf3665cdea09060e.svg">后用你的秘密整数<img src="https://cdn.nlark.com/yuque/__latex/99402bef5a74e0f9624ac90041b07adb.svg">计算出共享秘密值。</p><p>使用<code>decrypt.py</code>文件来解码flag</p><blockquote><p>{‘iv’: ‘cd9da9f1c60925922377ea952afc212c’, ‘encrypted_flag’: ‘febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8’}</p></blockquote><blockquote><p>您可以通过只发送一个位来指定公共<img src="https://cdn.nlark.com/yuque/__latex/bf98c0ddcbe9c1e535f767c78c3aa813.svg">坐标取了两个可能值中的哪一个。试着想想如何做到这一点。这两个<img src="https://cdn.nlark.com/yuque/__latex/bf98c0ddcbe9c1e535f767c78c3aa813.svg">值是如何相互关联的？</p></blockquote><h4 id="WriteUp-4"><a href="#WriteUp-4" class="headerlink" title="WriteUp"></a>WriteUp</h4><p>由题前背景介绍中可以知道，在曲线参数一致，即在同一条椭圆曲线上，给定<img src="https://cdn.nlark.com/yuque/__latex/712ecf7894348e92d8779c3ee87eeeb0.svg">，<img src="https://cdn.nlark.com/yuque/__latex/bf98c0ddcbe9c1e535f767c78c3aa813.svg">值只有两个可能；题目中已经给出<img src="https://cdn.nlark.com/yuque/__latex/732d87b610d5fcf5b6f93afcb6564dc4.svg">，可以借助<code>sqrt_mod</code>函数来求解两个<img src="https://cdn.nlark.com/yuque/__latex/bf98c0ddcbe9c1e535f767c78c3aa813.svg">值，并可测试两个<img src="https://cdn.nlark.com/yuque/__latex/bf98c0ddcbe9c1e535f767c78c3aa813.svg">值取的不同点标量乘法求得的点的<img src="https://cdn.nlark.com/yuque/__latex/712ecf7894348e92d8779c3ee87eeeb0.svg">相同。求得<img src="https://cdn.nlark.com/yuque/__latex/712ecf7894348e92d8779c3ee87eeeb0.svg">值后用题目给出的<code>decrypt</code>函数求解得到flag。</p><h4 id="EXP-flag-3"><a href="#EXP-flag-3" class="headerlink" title="EXP&amp;flag"></a>EXP&amp;flag</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> GF</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> sqrt_mod</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, p</span>):</span><br><span class="line">        F = GF(p) <span class="comment"># 定义有限域</span></span><br><span class="line">        <span class="comment"># 让x,y在有限域内运算</span></span><br><span class="line">        <span class="variable language_">self</span>.x = F(x)</span><br><span class="line">        <span class="variable language_">self</span>.y = F(y)</span><br><span class="line">        <span class="variable language_">self</span>.modulus = p <span class="comment"># 模数</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition</span>(<span class="params">p1: Point, p2: Point, a, b</span>):</span><br><span class="line">    x1 = p1.x</span><br><span class="line">    y1 = p1.y</span><br><span class="line">    x2 = p2.x</span><br><span class="line">    y2 = p2.y</span><br><span class="line">    <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 == y2: <span class="comment"># 如果P,Q重合</span></span><br><span class="line">        d = (<span class="number">3</span>*x1**<span class="number">2</span> + a) / (<span class="number">2</span>*y1)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># P,Q为不同两点</span></span><br><span class="line">        d = (y2 - y1) / (x2 - x1)</span><br><span class="line">    x = d**<span class="number">2</span> - x1 - x2</span><br><span class="line">    y = d*(x1 - x) - y1</span><br><span class="line">    <span class="keyword">return</span> Point(x, y, p1.modulus)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Scalar_Multiplication</span>(<span class="params">p: Point, n, a, b</span>):</span><br><span class="line">    q = p</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = addition(r, q, a, b)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                r = q</span><br><span class="line">        q = addition(q, q, a, b)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">x = <span class="number">4726</span></span><br><span class="line">n_b = <span class="number">6534</span></span><br><span class="line"></span><br><span class="line">[y1,y2] = sqrt_mod(x**<span class="number">3</span> + <span class="number">497</span>*x + <span class="number">1768</span>, <span class="number">9739</span>, <span class="literal">True</span>)</span><br><span class="line">p1 = Point(x, y1, <span class="number">9739</span>)</span><br><span class="line">p2 = Point(x, y2, <span class="number">9739</span>)</span><br><span class="line">a1 = Scalar_Multiplication(p1, n_b, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line">a2 = Scalar_Multiplication(p2, n_b, <span class="number">497</span>, <span class="number">1768</span>)</span><br><span class="line"><span class="built_in">print</span>(a1.x, a1.y, a2.x, a2.y)</span><br><span class="line"><span class="comment"># 1791 7558 1791 2181</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_pkcs7_padded</span>(<span class="params">message</span>):</span><br><span class="line">    padding = message[-message[-<span class="number">1</span>]:]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(padding[i] == <span class="built_in">len</span>(padding) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(padding)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">shared_secret: <span class="built_in">int</span>, iv: <span class="built_in">str</span>, ciphertext: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="comment"># Derive AES key from shared secret</span></span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(<span class="built_in">str</span>(shared_secret).encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    key = sha1.digest()[:<span class="number">16</span>]</span><br><span class="line">    <span class="comment"># Decrypt flag</span></span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line">    iv = <span class="built_in">bytes</span>.fromhex(iv)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_pkcs7_padded(plaintext):</span><br><span class="line">        <span class="keyword">return</span> unpad(plaintext, <span class="number">16</span>).decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> plaintext.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shared_secret = <span class="number">1791</span></span><br><span class="line">iv = <span class="string">&#x27;cd9da9f1c60925922377ea952afc212c&#x27;</span></span><br><span class="line">ciphertext = <span class="string">&#x27;febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypt_flag(shared_secret, iv, ciphertext))</span><br><span class="line"><span class="comment"># crypto&#123;3ff1c1ent_k3y_3xch4ng3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="附-解题截图"><a href="#附-解题截图" class="headerlink" title="附 解题截图"></a>附 解题截图</h2><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241118173231996.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cryptohack-SYMMETRIC CIPHERS</title>
      <link href="/2024/11/17/SYMMETRIC_CIPHERS/"/>
      <url>/2024/11/17/SYMMETRIC_CIPHERS/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="Cryptohack-SYMMETRIC-CIPHERS"><a href="#Cryptohack-SYMMETRIC-CIPHERS" class="headerlink" title="Cryptohack-SYMMETRIC CIPHERS"></a>Cryptohack-SYMMETRIC CIPHERS</h1><h2 id="SYMMETRIC-CIPHERS"><a href="#SYMMETRIC-CIPHERS" class="headerlink" title="SYMMETRIC CIPHERS"></a>SYMMETRIC CIPHERS</h2><p>对称密钥密码是使用相同密钥加密和解密数据的算法。目标是使用短密钥安全有效地发送长消息。</p><p>最著名的对称密钥密码是2001年标准化的高级加密标准（<a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES</a>）。它如此普遍，以至于现代处理器甚至包含了执行AES操作的<a href="https://en.wikipedia.org/wiki/AES_instruction_set">特殊指令集</a>。这里的第一系列挑战将指导您了解AES的内部工作原理，向您展示其单独的组件如何协同工作，使其成为一个安全的密码。到最后，您将构建自己的AES解密代码！</p><p>我们可以将对称密钥密码分为两类，分组密码和流密码。分组密码将明文分解为固定长度的块，并将每个块与密钥一起通过加密函数发送。同时，流密码通过将伪随机密钥流与数据进行异或运算，一次加密一个字节的明文。AES是一种分组密码，但可以使用CTR等操作模式转换为流密码。</p><p>分组密码仅指定如何加密和解密单个块，必须使用一种<a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">操作模式</a>将密码应用于较长的消息。这就是现实世界的实现经常失败的地方，因为开发人员不理解使用特定模式的微妙含义。在剩下的挑战中，您将攻击各种模式的常见滥用。</p><h3 id="How-AES-WORKS"><a href="#How-AES-WORKS" class="headerlink" title="How AES WORKS"></a>How AES WORKS</h3><h4 id="Keyed-Permutations"><a href="#Keyed-Permutations" class="headerlink" title="Keyed Permutations"></a>Keyed Permutations</h4><p>AES和所有好的分组密码一样，执行“密钥置换”。这意味着它将每个可能的输入块映射到一个唯一的输出块，并使用密钥确定要执行的置换。</p><blockquote><p>“块”只是指固定数量的比特或字节，可以表示任何类型的数据。AES处理一个块并输出另一个块。我们将具体讨论AES的变体，它适用于128位（16字节）块和128位密钥，称为AES-128。</p></blockquote><p>使用相同的密钥，可以反向执行置换，将输出块映射回原始输入块。重要的是，输入和输出块之间有一对一的对应关系，否则我们将无法依赖密文解密回我们开始时的明文。</p><p>题目：一对一对应关系的数学术语是什么？</p><blockquote><p>bijection</p></blockquote><h4 id="Resisting-Bruteforce"><a href="#Resisting-Bruteforce" class="headerlink" title="Resisting Bruteforce"></a>Resisting Bruteforce</h4><p>如果分组密码是安全的，那么攻击者就没有办法将AES的输出与比特的<a href="https://en.wikipedia.org/wiki/Pseudorandom_permutation">随机排列</a>区分开来。此外，没有比简单地强制执行每个可能的密钥更好的方法来撤消排列。这就是为什么学者们认为，如果他们能找到一种比粗暴破解密钥所需步骤更少的攻击，即使这种攻击实际上是不可行的，那么从理论上讲，密码就是“被攻破的”。</p><blockquote><p>强制执行128位密钥空间有多难？<a href="https://crypto.stackexchange.com/a/48669">有人估计</a>，如果你用整个比特币挖矿网络的力量来对抗AES-128密钥，破解密钥将需要100多倍于宇宙年龄的时间。</p></blockquote><p>事实证明，对AES的<a href="https://en.wikipedia.org/wiki/Biclique_attack">攻击</a>比bruteforce好，但只是稍微好一点——它将AES-128的安全级别降低到126.1位，并且已经8年多没有改进了。鉴于128位提供的巨大“安全裕度”，以及尽管进行了广泛的研究，但仍缺乏改进，因此它不被认为是对AES安全的可信风险。但是，是的，从非常狭义的意义上讲，它“打破”了AES。</p><p>最后，虽然量子计算机有可能通过<a href="https://en.wikipedia.org/wiki/Shor%27s_algorithm">Shor的算法</a>完全破解RSA等流行的公钥密码系统，但据认为，通过<a href="https://en.wikipedia.org/wiki/Grover's_algorithm">Grover的算法</a>，它们只能将对称密码系统的安全级别降低一半。这就是为什么人们建议使用AES-256的原因之一，尽管它的性能较差，因为它在量子未来仍然可以提供非常足够的128位安全性。</p><p>题目：针对AES的最佳单密钥攻击的名称是什么？</p><blockquote><p>biclique</p></blockquote><h4 id="Structure-of-AES"><a href="#Structure-of-AES" class="headerlink" title="Structure of AES"></a>Structure of AES</h4><p>为了实现在没有密钥的情况下无法反转的密钥置换，AES对输入应用了大量的ad-hoc混合操作。这与RSA等公钥密码系统形成鲜明对比，后者基于优雅的独立数学问题。AES的优雅程度要低得多，但速度非常快。</p><p>在较高层次上，AES-128从“密钥编排”开始，然后在一个状态矩阵上运行10轮。起始状态矩阵就是我们想要加密的明文块，表示为4x4字节矩阵。在10轮的过程中，状态矩阵被多次可逆变换反复修改。</p><blockquote><p>每个转换步骤都有一个明确的目的，基于Claude Shannon在20世纪40年代建立的安全密码的理论性质。在接下来的挑战中，我们将更仔细地研究其中的每一个步骤。</p></blockquote><p>以下是AES加密阶段的概述：</p><ol><li><p><strong>密钥扩展</strong>&#x2F;密钥编排</p><p>从128位密钥中，导出11个单独的128位“轮密钥”：一个用于每个轮密钥添加步骤。</p></li><li><p><strong>初始密钥添加</strong></p><p>轮密钥添加 - 第一轮密钥的字节与状态矩阵的字节进行XOR运算。</p></li><li><p><strong>循环</strong> - 此阶段循环10次，包括9个主循环和一个“最后一轮”</p><ol><li><strong>字节代换</strong> - 根据查找表（”S-box”），每个规定的字节被替换为不同的字节。</li><li><strong>行移位</strong> - 状态矩阵的最后三行被转置——在一列、两列或三列上移动。</li><li><strong>列混淆</strong> - 对状态矩阵的列执行矩阵乘法，将每列中的四个字节组合在一起。这在最后一轮中被跳过。</li><li><strong>轮密钥添加</strong> - 当前轮密钥的字节与状态矩阵的字节进行XOR运算。</li></ol></li></ol><p>题目：代码中包括一个bytes2matrix函数，用于将初始明文块转换为状态矩阵。编写一个matrix2bytes函数将该矩阵转换回字节，并将生成的明文作为flag提交。</p><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># matrix.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Converts a 16-byte array into a 4x4 matrix.  &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">list</span>(text[i:i+<span class="number">4</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text), <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2bytes</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Converts a 4x4 matrix into a 16-byte array.  &quot;&quot;&quot;</span></span><br><span class="line">    ????</span><br><span class="line"></span><br><span class="line">matrix = [</span><br><span class="line">    [<span class="number">99</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">112</span>],</span><br><span class="line">    [<span class="number">116</span>, <span class="number">111</span>, <span class="number">123</span>, <span class="number">105</span>],</span><br><span class="line">    [<span class="number">110</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">116</span>],</span><br><span class="line">    [<span class="number">114</span>, <span class="number">105</span>, <span class="number">120</span>, <span class="number">125</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matrix2bytes(matrix))</span><br></pre></td></tr></table></figure><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2bytes</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Converts a 4x4 matrix into a 16-byte array.  &quot;&quot;&quot;</span></span><br><span class="line">    message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> matrix:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            message += <span class="built_in">str</span>(<span class="built_in">hex</span>(i[j])[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(message, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">matrix = [</span><br><span class="line">    [<span class="number">99</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">112</span>],</span><br><span class="line">    [<span class="number">116</span>, <span class="number">111</span>, <span class="number">123</span>, <span class="number">105</span>],</span><br><span class="line">    [<span class="number">110</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">116</span>],</span><br><span class="line">    [<span class="number">114</span>, <span class="number">105</span>, <span class="number">120</span>, <span class="number">125</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matrix2bytes(matrix))</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;inmatrix&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Round-Keys"><a href="#Round-Keys" class="headerlink" title="Round Keys"></a>Round Keys</h4><p>现在我们将跳过<strong>密钥扩展</strong>阶段的细节。关键在于，它接收我们的16字节密钥，并从我们的初始密钥中生成11个4x4矩阵，称为“轮密钥”。这些轮密钥允许AES从我们提供的单个密钥中获得额外的里程。</p><p>下一个<strong>初始密钥添加</strong>阶段有一个<em>轮密钥添加</em>步骤。<em>轮密钥添加</em>步骤很简单：它将当前状态矩阵与当前轮密钥进行异或。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241108102447525.png" alt="image-20241108102447525"></p><p>轮密钥添加也是每一轮的最后一步。<em>轮密钥添加</em>使AES成为一种“密钥置换”，而不仅仅是一种置换。这是AES中唯一将密钥混合到状态矩阵中的部分，但对于决定发生的置换至关重要。</p><p>正如您在之前的挑战中所看到的，如果您知道密钥，XOR是一个很容易反转的操作，但如果您不知道密钥，则很难撤消。现在想象一下，尝试恢复用11个不同密钥XOR的明文，并且在每个XOR操作之间用一系列替换和转置密码严重混淆。AES就是这么做的！我们将在接下来的几次挑战中看到这种联合的有效性。</p><p>题目：完成<code>add_round_key</code>函数，然后使用<code>matrix2bytes</code>函数获取下一个flag。</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2bytes</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Converts a 4x4 matrix into a 16-byte array.  &quot;&quot;&quot;</span></span><br><span class="line">    message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> matrix:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            message += <span class="built_in">str</span>(<span class="built_in">hex</span>(i[j])[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(message, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_round_key</span>(<span class="params">s, k</span>):</span><br><span class="line">    new_state = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            new_state[i][j] = s[i][j] ^ k[i][j]</span><br><span class="line">    <span class="keyword">return</span> new_state</span><br><span class="line"></span><br><span class="line">state = [</span><br><span class="line">    [<span class="number">206</span>, <span class="number">243</span>, <span class="number">61</span>, <span class="number">34</span>],</span><br><span class="line">    [<span class="number">171</span>, <span class="number">11</span>, <span class="number">93</span>, <span class="number">31</span>],</span><br><span class="line">    [<span class="number">16</span>, <span class="number">200</span>, <span class="number">91</span>, <span class="number">108</span>],</span><br><span class="line">    [<span class="number">150</span>, <span class="number">3</span>, <span class="number">194</span>, <span class="number">51</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">round_key = [</span><br><span class="line">    [<span class="number">173</span>, <span class="number">129</span>, <span class="number">68</span>, <span class="number">82</span>],</span><br><span class="line">    [<span class="number">223</span>, <span class="number">100</span>, <span class="number">38</span>, <span class="number">109</span>],</span><br><span class="line">    [<span class="number">32</span>, <span class="number">189</span>, <span class="number">53</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">253</span>, <span class="number">48</span>, <span class="number">187</span>, <span class="number">78</span>],</span><br><span class="line">]</span><br><span class="line">matrix = add_round_key(state, round_key)</span><br><span class="line"><span class="built_in">print</span>(matrix2bytes(matrix))</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;r0undk3y&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Confusion-through-Substitution"><a href="#Confusion-through-Substitution" class="headerlink" title="Confusion through Substitution"></a>Confusion through Substitution</h4><p>每个AES轮的第一步是<em>字节替换</em>。这一步包含获取状态矩阵的每个字节，并将其替换为预设16x16查找表中的不同字节。查找表被称为“替换盒”或简称为“S盒，乍一看可能会令人困惑。让我们把它分解一下。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241108105347799.png" alt="image-20241108105347799"></p><p>1945年，美国数学家Claude Shannon发表了一篇关于信息论的开创性论文。它将“混淆”确定为安全密码的基本属性。“混淆”意味着密文和密钥之间的关系应该尽可能复杂。只要有一个密文，就不应该有办法了解任何关于密钥的信息。</p><p>如果密码的混淆性较差，则可以将密文、密钥和明文之间的关系表示为线性函数。例如，在凯撒密码中，<code>ciphertext = plaintext + key</code>。这是一个显而易见的关系，很容易逆转。更复杂的线性变换可以使用高斯消元等技术来解决。即使是低阶多项式，例如<code>x^4 + 51x^3 + x</code>这样的方程，也可以使用<a href="https://math.stackexchange.com/a/1078515">代数方法</a>有效地求解。然而，多项式的次数越高，通常就越难求解——它只能用越来越多的线性函数来近似。</p><p>S盒的主要目的是以一种不易被线性函数近似的方式转换输入。S盒的目标是高<em>非线性</em>，虽然AES的S盒并不完美，但它非常接近。S盒中的快速查找是对输入字节执行极其非线性函数的快捷方式。该函数涉及在<a href="https://www.samiam.org/galois.html">伽罗瓦域 2**8</a>中取模逆，然后应用仿射变换，该变换已被调整以最大程度地混淆。表达函数的最简单方法是通过以下高次多项式：<br>$$<br>f(x) &#x3D; 05x^{fe} + 09x^{fd} + f9x^{fb} + 25x^{f7} + f4x^{ef} + 01x^{df} + b5x^{bf} + 9fx^{7f} + 63<br>$$<br>为了制作S盒，该函数已根据从0x00到0xff的所有输入值以及查找表中的输出进行了计算。</p><p>题目：实现<code>sub_bytes</code>函数，通过逆S盒传递状态矩阵，然后将其转换为字节以获得flag。</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2bytes</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Converts a 4x4 matrix into a 16-byte array.  &quot;&quot;&quot;</span></span><br><span class="line">    message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> matrix:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            message += <span class="built_in">str</span>(<span class="built_in">hex</span>(i[j])[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(message, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">s_box = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">inv_s_box = (</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>,</span><br><span class="line">    <span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>,</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>,</span><br><span class="line">    <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>,</span><br><span class="line">    <span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">state = [</span><br><span class="line">    [<span class="number">251</span>, <span class="number">64</span>, <span class="number">182</span>, <span class="number">81</span>],</span><br><span class="line">    [<span class="number">146</span>, <span class="number">168</span>, <span class="number">33</span>, <span class="number">80</span>],</span><br><span class="line">    [<span class="number">199</span>, <span class="number">159</span>, <span class="number">195</span>, <span class="number">24</span>],</span><br><span class="line">    [<span class="number">64</span>, <span class="number">80</span>, <span class="number">182</span>, <span class="number">255</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_bytes</span>(<span class="params">s, sbox=s_box</span>):</span><br><span class="line">    new_state = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            pos = s[i][j]</span><br><span class="line">            row = pos &gt;&gt; <span class="number">4</span></span><br><span class="line">            col = pos - (row &lt;&lt; <span class="number">4</span>)</span><br><span class="line">            new_state[i][j] = inv_s_box[row * <span class="number">16</span> + col]</span><br><span class="line">    <span class="keyword">return</span> new_state</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matrix2bytes(sub_bytes(state, sbox=inv_s_box)))</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;l1n34rly&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Diffusion-through-Permutation"><a href="#Diffusion-through-Permutation" class="headerlink" title="Diffusion through Permutation"></a>Diffusion through Permutation</h4><p>我们已经看到S盒替代是如何造成混淆的。Shannon描述的另一个关键性质是“扩散”。这与输入密码的每个部分如何传播到输出的每个部分有关。<br>替代本身会产生非线性，但它不会将其分布在整个状态矩阵上。如果没有扩散，同一位置的同一字节在每一轮都会得到相同的转换。这将允许密码分析员分别攻击状态矩阵中的每个字节位置。我们需要通过对状态矩阵进行置乱（以可逆的方式）来交替替换，以便对一个字节应用的替换会影响状态矩阵中的所有其他字节。然后，下一个S盒的每个输入都变成了多个字节的函数，这意味着随着每一轮的进行，系统的代数复杂性都会大大增加。</p><blockquote><p>理想的扩散量会导致明文中一比特位的变化，从而导致密文中一半比特位的统计变化。这一理想的结果被称为<a href="https://en.wikipedia.org/wiki/Avalanche_effect">雪崩效应</a>。</p></blockquote><p><em>行移位</em>和<em>列混淆</em>步骤相结合可以实现这一点。它们协同工作，确保每个字节在两轮内影响状态矩阵中的其他每个字节。</p><p><em>行移位</em>是AES中最简单的转换。它使状态矩阵的第一行保持不变。第二行环绕向左移动一列。第三行移动了两列，第四行移动了三列。维基百科说得很好：“这一步的重要性是避免独立加密列，在这种情况下，AES会退化为四个独立的分组密码。”</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241108140107685.png" alt="image-20241108140107685"></p><blockquote><p>该图（和AES规范）显示了以列主符号表示的<code>行移位</code>操作。然而，下面的示例代码使用行主符号表示状态矩阵，因为它在Python中更自然。只要每次访问矩阵时使用相同的符号，最终结果就是相同的。由于访问模式和缓存行为，使用一种符号可以带来更好的性能。</p></blockquote><p><em>列混淆</em>更复杂。它在Rijndael的伽罗瓦域中在状态矩阵的列和预设矩阵之间执行矩阵乘法。因此，每列的每个字节都会影响结果列的所有字节。实施细节细致入微；<a href="https://www.samiam.org/mix-column.html">这个页面</a>和<a href="https://en.wikipedia.org/wiki/Rijndael_MixColumns">维基百科</a>很好地覆盖了它们。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241108140347816.png" alt="image-20241108140347816"></p><p>题目：我们提供了执行列混淆和正向行移位操作的代码。实现<code>inv_shift_rows</code>后，获取状态矩阵，在其上运行<code>inv_mix_columns</code>、<code>inv_shift_rows</code>，然后转换为字节，您将得到您的flag。</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2bytes</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Converts a 4x4 matrix into a 16-byte array.  &quot;&quot;&quot;</span></span><br><span class="line">    message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> matrix:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            message += <span class="built_in">str</span>(<span class="built_in">hex</span>(i[j])[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(message, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift_rows</span>(<span class="params">s</span>):</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_shift_rows</span>(<span class="params">s</span>):</span><br><span class="line">    s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>] = s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line">    s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>] = s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>]</span><br><span class="line">    s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>] = s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># learned from http://cs.ucsb.edu/~koc/cs178/projects/JT/aes.c</span></span><br><span class="line">xtime = <span class="keyword">lambda</span> a: (((a &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1B</span>) &amp; <span class="number">0xFF</span>) <span class="keyword">if</span> (a &amp; <span class="number">0x80</span>) <span class="keyword">else</span> (a &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mix_single_column</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="comment"># see Sec 4.1.2 in The Design of Rijndael</span></span><br><span class="line">    t = a[<span class="number">0</span>] ^ a[<span class="number">1</span>] ^ a[<span class="number">2</span>] ^ a[<span class="number">3</span>]</span><br><span class="line">    u = a[<span class="number">0</span>]</span><br><span class="line">    a[<span class="number">0</span>] ^= t ^ xtime(a[<span class="number">0</span>] ^ a[<span class="number">1</span>])</span><br><span class="line">    a[<span class="number">1</span>] ^= t ^ xtime(a[<span class="number">1</span>] ^ a[<span class="number">2</span>])</span><br><span class="line">    a[<span class="number">2</span>] ^= t ^ xtime(a[<span class="number">2</span>] ^ a[<span class="number">3</span>])</span><br><span class="line">    a[<span class="number">3</span>] ^= t ^ xtime(a[<span class="number">3</span>] ^ u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mix_columns</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        mix_single_column(s[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_mix_columns</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># see Sec 4.1.3 in The Design of Rijndael</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        u = xtime(xtime(s[i][<span class="number">0</span>] ^ s[i][<span class="number">2</span>]))</span><br><span class="line">        v = xtime(xtime(s[i][<span class="number">1</span>] ^ s[i][<span class="number">3</span>]))</span><br><span class="line">        s[i][<span class="number">0</span>] ^= u</span><br><span class="line">        s[i][<span class="number">1</span>] ^= v</span><br><span class="line">        s[i][<span class="number">2</span>] ^= u</span><br><span class="line">        s[i][<span class="number">3</span>] ^= v</span><br><span class="line"></span><br><span class="line">    mix_columns(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">state = [</span><br><span class="line">    [<span class="number">108</span>, <span class="number">106</span>, <span class="number">71</span>, <span class="number">86</span>],</span><br><span class="line">    [<span class="number">96</span>, <span class="number">62</span>, <span class="number">38</span>, <span class="number">72</span>],</span><br><span class="line">    [<span class="number">42</span>, <span class="number">184</span>, <span class="number">92</span>, <span class="number">209</span>],</span><br><span class="line">    [<span class="number">94</span>, <span class="number">79</span>, <span class="number">8</span>, <span class="number">54</span>],</span><br><span class="line">]</span><br><span class="line">inv_mix_columns(state)</span><br><span class="line">inv_shift_rows(state)</span><br><span class="line"><span class="built_in">print</span>(matrix2bytes(state))</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;d1ffUs3R&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Bringing-It-All-Together"><a href="#Bringing-It-All-Together" class="headerlink" title="Bringing It All Together"></a>Bringing It All Together</h4><p>除了<strong>KeyExpansion</strong>阶段，我们还概述了AES的所有部分。我们已经展示了<em>SubBytes</em>如何提供混淆，<em>ShiftRows</em>和<em>MixColumns</em>如何提供扩散，以及这两个属性如何协同工作，在状态矩阵上反复循环非线性转换。最后，<em>AddRoundKey</em>将密钥种子放入这个替换置换网络中，使密码成为密钥置换。</p><p>解密涉及反向执行“AES结构”挑战中描述的步骤，应用反向操作。请注意，仍然需要先运行KeyExpansion，并且将以相反的顺序使用轮密钥。由于XOR具有自逆特性，所以<em>AddRoundKey</em>及其逆是相同的。</p><p>题目：我们提供了KeyExpansion的代码，以及由AES-128正确加密的密文。复制到目前为止您编写的所有代码块，并完成实现图中所示步骤的<code>decrypt</code>函数。解密后的明文就是flag。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241115175249455.png" alt="image-20241115175249455"><br>这些练习中使用的代码取自Bo Zhu的超简单Python AES实现，因此我们在这里复制了许可证。</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s_box = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">inv_s_box = (</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>,</span><br><span class="line">    <span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>,</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>,</span><br><span class="line">    <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>,</span><br><span class="line">    <span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Converts a 16-byte array into a 4x4 matrix.  &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">list</span>(text[i:i+<span class="number">4</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text), <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix2bytes</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Converts a 4x4 matrix into a 16-byte array.  &quot;&quot;&quot;</span></span><br><span class="line">    message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> matrix:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            message += <span class="built_in">str</span>(<span class="built_in">hex</span>(i[j])[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(message, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_round_key</span>(<span class="params">s, k</span>):</span><br><span class="line">    new_state = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            new_state[i][j] = s[i][j] ^ k[i][j]</span><br><span class="line">    <span class="keyword">return</span> new_state</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_bytes</span>(<span class="params">s, sbox=s_box</span>):</span><br><span class="line">    new_state = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            pos = s[i][j]</span><br><span class="line">            row = pos &gt;&gt; <span class="number">4</span></span><br><span class="line">            col = pos - (row &lt;&lt; <span class="number">4</span>)</span><br><span class="line">            new_state[i][j] = inv_s_box[row * <span class="number">16</span> + col]</span><br><span class="line">    <span class="keyword">return</span> new_state</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift_rows</span>(<span class="params">s</span>):</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_shift_rows</span>(<span class="params">s</span>):</span><br><span class="line">    s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>] = s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line">    s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>] = s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>]</span><br><span class="line">    s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>] = s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># learned from http://cs.ucsb.edu/~koc/cs178/projects/JT/aes.c</span></span><br><span class="line">xtime = <span class="keyword">lambda</span> a: (((a &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1B</span>) &amp; <span class="number">0xFF</span>) <span class="keyword">if</span> (a &amp; <span class="number">0x80</span>) <span class="keyword">else</span> (a &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mix_single_column</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="comment"># see Sec 4.1.2 in The Design of Rijndael</span></span><br><span class="line">    t = a[<span class="number">0</span>] ^ a[<span class="number">1</span>] ^ a[<span class="number">2</span>] ^ a[<span class="number">3</span>]</span><br><span class="line">    u = a[<span class="number">0</span>]</span><br><span class="line">    a[<span class="number">0</span>] ^= t ^ xtime(a[<span class="number">0</span>] ^ a[<span class="number">1</span>])</span><br><span class="line">    a[<span class="number">1</span>] ^= t ^ xtime(a[<span class="number">1</span>] ^ a[<span class="number">2</span>])</span><br><span class="line">    a[<span class="number">2</span>] ^= t ^ xtime(a[<span class="number">2</span>] ^ a[<span class="number">3</span>])</span><br><span class="line">    a[<span class="number">3</span>] ^= t ^ xtime(a[<span class="number">3</span>] ^ u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mix_columns</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        mix_single_column(s[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_mix_columns</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="comment"># see Sec 4.1.3 in The Design of Rijndael</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        u = xtime(xtime(s[i][<span class="number">0</span>] ^ s[i][<span class="number">2</span>]))</span><br><span class="line">        v = xtime(xtime(s[i][<span class="number">1</span>] ^ s[i][<span class="number">3</span>]))</span><br><span class="line">        s[i][<span class="number">0</span>] ^= u</span><br><span class="line">        s[i][<span class="number">1</span>] ^= v</span><br><span class="line">        s[i][<span class="number">2</span>] ^= u</span><br><span class="line">        s[i][<span class="number">3</span>] ^= v</span><br><span class="line"></span><br><span class="line">    mix_columns(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">expand_key</span>(<span class="params">master_key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Expands and returns a list of key matrices for the given master_key.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Round constants https://en.wikipedia.org/wiki/AES_key_schedule#Round_constants</span></span><br><span class="line">    r_con = (</span><br><span class="line">        <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>,</span><br><span class="line">        <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">        <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>,</span><br><span class="line">        <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize round keys with raw key material.</span></span><br><span class="line">    key_columns = bytes2matrix(master_key)</span><br><span class="line">    iteration_size = <span class="built_in">len</span>(master_key) // <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Each iteration has exactly as many columns as the key material.</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(key_columns) &lt; (N_ROUNDS + <span class="number">1</span>) * <span class="number">4</span>:</span><br><span class="line">        <span class="comment"># Copy previous word.</span></span><br><span class="line">        word = <span class="built_in">list</span>(key_columns[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform schedule_core once every &quot;row&quot;.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(key_columns) % iteration_size == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># Circular shift.</span></span><br><span class="line">            word.append(word.pop(<span class="number">0</span>))</span><br><span class="line">            <span class="comment"># Map to S-BOX.</span></span><br><span class="line">            word = [s_box[b] <span class="keyword">for</span> b <span class="keyword">in</span> word]</span><br><span class="line">            <span class="comment"># XOR with first byte of R-CON, since the others bytes of R-CON are 0.</span></span><br><span class="line">            word[<span class="number">0</span>] ^= r_con[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(master_key) == <span class="number">32</span> <span class="keyword">and</span> <span class="built_in">len</span>(key_columns) % iteration_size == <span class="number">4</span>:</span><br><span class="line">            <span class="comment"># Run word through S-box in the fourth iteration when using a</span></span><br><span class="line">            <span class="comment"># 256-bit key.</span></span><br><span class="line">            word = [s_box[b] <span class="keyword">for</span> b <span class="keyword">in</span> word]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># XOR with equivalent word from previous iteration.</span></span><br><span class="line">        word = <span class="built_in">bytes</span>(i^j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(word, key_columns[-iteration_size]))</span><br><span class="line">        key_columns.append(word)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Group keywords in 4x4 byte matrices.</span></span><br><span class="line">    <span class="keyword">return</span> [key_columns[<span class="number">4</span>*i : <span class="number">4</span>*(i+<span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key_columns) // <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">key, ciphertext</span>):</span><br><span class="line">    round_keys = expand_key(key) <span class="comment"># Remember to start from the last round key and work backwards through them when decrypting</span></span><br><span class="line">    <span class="comment"># Convert ciphertext to state matrix</span></span><br><span class="line">    cipher = bytes2matrix(ciphertext)</span><br><span class="line">    <span class="comment"># Initial add round key step</span></span><br><span class="line">    <span class="comment"># 传入当前cipher状态和当前轮密钥</span></span><br><span class="line">    <span class="comment"># 因为N_ROUNDS = 10 倒序 取keys[10]</span></span><br><span class="line">    cipher = add_round_key(cipher, round_keys[<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N_ROUNDS - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 每一轮的解密 除了最后一轮</span></span><br><span class="line">        inv_shift_rows(cipher)</span><br><span class="line">        cipher = sub_bytes(cipher)</span><br><span class="line">        cipher = add_round_key(cipher, round_keys[i])</span><br><span class="line">        inv_mix_columns(cipher)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Run final round (skips the InvMixColumns step)</span></span><br><span class="line">    inv_shift_rows(cipher)</span><br><span class="line">    cipher = sub_bytes(cipher)</span><br><span class="line">    cipher = add_round_key(cipher, round_keys[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># Convert state matrix to plaintext</span></span><br><span class="line">    plaintext = matrix2bytes(cipher)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line">N_ROUNDS = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;\xc3,\\\xa6\xb5\x80^\x0c\xdb\x8d\xa5z*\xb6\xfe\\&#x27;</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;\xd1O\x14j\xa4+O\xb6\xa1\xc4\x08B)\x8f\x12\xdd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypt(key, ciphertext))</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;MYAES128&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="SYMMETRIC-STARTER"><a href="#SYMMETRIC-STARTER" class="headerlink" title="SYMMETRIC STARTER"></a>SYMMETRIC STARTER</h3><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241116153012048.png" alt="image-20241116153012048"></p><h4 id="Modes-of-Operation-Starter"><a href="#Modes-of-Operation-Starter" class="headerlink" title="Modes of Operation Starter"></a>Modes of Operation Starter</h4><h5 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h5><p>前面的一组挑战展示了AES如何对单个数据块执行密钥置换。在实际中，我们需要加密比单个块长得多的消息。<em>操作模式</em>描述了如何在较长的消息上使用类似AES的密码。</p><p>如果使用不当，所有模式都有严重的弱点。这个挑战将带您进入网站的不同部分，在那里您可以与API交互并利用这些弱点。熟悉界面，并用它来拿下你的下一个flag！</p><h5 id="SOURCE"><a href="#SOURCE" class="headerlink" title="SOURCE"></a>SOURCE</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">KEY = ?</span><br><span class="line">FLAG = ?</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/block_cipher_starter/decrypt/&lt;ciphertext&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line"></span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;plaintext&quot;</span>: decrypted.<span class="built_in">hex</span>()&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/block_cipher_starter/encrypt_flag/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_flag</span>():</span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_ECB)</span><br><span class="line">    encrypted = cipher.encrypt(FLAG.encode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;ciphertext&quot;</span>: encrypted.<span class="built_in">hex</span>()&#125;</span><br></pre></td></tr></table></figure><h5 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h5><p>由starter页点击ENCRYPT_FLAG()的SUBMIT按钮，在OUTPUT中得到json数据:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;ciphertext&quot;</span><span class="punctuation">:</span><span class="string">&quot;0bf3da3fce245ce6bd6c9a9abaaef49945bbf20ec314ca38b341707c36bd00b9&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241116141049287.png" alt="image-20241116141049287"></p><p>将OUTPUT中的ciphertext扔到DECRYPT(CIPHERTEXT)中，点击SUBMIT按钮，在json中得到解密后的hex值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;plaintext&quot;</span><span class="punctuation">:</span><span class="string">&quot;63727970746f7b626c30636b5f633170683372355f3472335f663435375f217d&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241116141713943.png" alt="image-20241116141713943"></p><p>再放入HEX ENCODER&#x2F;DECODER中，HEX转为TEXT得到flag。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241116141804516.png" alt="image-20241116141804516"></p><h4 id="Passwords-as-Keys"><a href="#Passwords-as-Keys" class="headerlink" title="Passwords as Keys"></a>Passwords as Keys</h4><h5 id="hint-1"><a href="#hint-1" class="headerlink" title="hint"></a>hint</h5><p>对称密钥算法中的密钥必须是随机字节，而不是密码或其他可预测的数据。随机字节应使用加密安全的伪随机数生成器（CSPRNG）生成。如果密钥在任何方面都是可预测的，那么密码的安全级别就会降低，并且访问密文的攻击者可能会对其进行解密。</p><p>仅仅因为密钥看起来像是由随机字节组成的，并不意味着它一定是。在这种情况下，密钥是使用哈希函数从简单密码中导出的，这使得密文是可破解的。</p><p>对于此挑战，您可以将HTTP请求编写到端点，或者离线攻击密文。祝你好运！</p><h5 id="SOURCE-1"><a href="#SOURCE-1" class="headerlink" title="SOURCE"></a>SOURCE</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># /usr/share/dict/words from</span></span><br><span class="line"><span class="comment"># https://gist.githubusercontent.com/wchargin/8927565/raw/d9783627c731268fb2935a731a618aa8e95cf465/words</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/usr/share/dict/words&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    words = [w.strip() <span class="keyword">for</span> w <span class="keyword">in</span> f.readlines()]</span><br><span class="line">keyword = random.choice(words)</span><br><span class="line"></span><br><span class="line">KEY = hashlib.md5(keyword.encode()).digest()</span><br><span class="line">FLAG = ?</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/passwords_as_keys/decrypt/&lt;ciphertext&gt;/&lt;password_hash&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext, password_hash</span>):</span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line">    key = <span class="built_in">bytes</span>.fromhex(password_hash)</span><br><span class="line"></span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;plaintext&quot;</span>: decrypted.<span class="built_in">hex</span>()&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/passwords_as_keys/encrypt_flag/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_flag</span>():</span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_ECB)</span><br><span class="line">    encrypted = cipher.encrypt(FLAG.encode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;ciphertext&quot;</span>: encrypted.<span class="built_in">hex</span>()&#125;</span><br></pre></td></tr></table></figure><h5 id="WriteUp-1"><a href="#WriteUp-1" class="headerlink" title="WriteUp"></a>WriteUp</h5><p>同上题一样，通过ENCRYPT_FLAG()获得ciphertext的json数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;ciphertext&quot;</span><span class="punctuation">:</span><span class="string">&quot;c92b7734070205bdf6c0087a751466ec13ae15e6f1bcdd3f3a535ec0f4bbae66&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>通过SOURCE提示得到密码本，本地调用网站函数来解密。</p><h5 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext, password_hash</span>):</span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line">    <span class="comment"># key = bytes.fromhex(password_hash)</span></span><br><span class="line">    key = password_hash</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;plaintext&quot;</span>: decrypted.<span class="built_in">hex</span>()&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相对路径读文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pwd.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    words = [w.strip() <span class="keyword">for</span> w <span class="keyword">in</span> f.readlines()]</span><br><span class="line">c = <span class="string">&quot;c92b7734070205bdf6c0087a751466ec13ae15e6f1bcdd3f3a535ec0f4bbae66&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> words:</span><br><span class="line">    <span class="comment"># 对密码本的每个数据进行爆破</span></span><br><span class="line">    KEY = hashlib.md5(i.encode()).digest()</span><br><span class="line">    m = decrypt(c, KEY)</span><br><span class="line">    m = m[<span class="string">&quot;plaintext&quot;</span>]</span><br><span class="line">    m = <span class="built_in">bytes</span>.fromhex(m)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;crypto&#123;&quot;</span> <span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;k3y5__r__n07__p455w0rdz?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="BLOCK-CIPHERS-1"><a href="#BLOCK-CIPHERS-1" class="headerlink" title="BLOCK CIPHERS 1"></a>BLOCK CIPHERS 1</h3><h4 id="ECB-CBC-WTF"><a href="#ECB-CBC-WTF" class="headerlink" title="ECB CBC WTF"></a>ECB CBC WTF</h4><h5 id="hint-2"><a href="#hint-2" class="headerlink" title="hint"></a>hint</h5><p>在这里，您可以在CBC中加密，但只能在ECB中解密。这不应该是一个弱点，因为它们是不同的模式…对吗？</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241116155954010.png" alt="image-20241116155954010"></p><h5 id="SOURCE-2"><a href="#SOURCE-2" class="headerlink" title="SOURCE"></a>SOURCE</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">KEY = ?</span><br><span class="line">FLAG = ?</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/ecbcbcwtf/decrypt/&lt;ciphertext&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line"></span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;plaintext&quot;</span>: decrypted.<span class="built_in">hex</span>()&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/ecbcbcwtf/encrypt_flag/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_flag</span>():</span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">    encrypted = cipher.encrypt(FLAG.encode())</span><br><span class="line">    ciphertext = iv.<span class="built_in">hex</span>() + encrypted.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;ciphertext&quot;</span>: ciphertext&#125;</span><br></pre></td></tr></table></figure><h5 id="WriteUp-2"><a href="#WriteUp-2" class="headerlink" title="WriteUp"></a>WriteUp</h5><p>同前几题，得到密文：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;ciphertext&quot;</span><span class="punctuation">:</span><span class="string">&quot;f14003406962ed9760ac5af1a8423677f05c7b58f9f99d8301ab42a138018c419d0af6c6c0a6a526db3eb816e943b1c7&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;f94d8df428e4641b2f251edee28f483b743f743a243cbafaaa1f3aed475466b0eab960009bf41f6c66d5880e6708b2de&quot;</span></span><br><span class="line">c = <span class="built_in">bytes</span>.fromhex(c)</span><br><span class="line"><span class="comment"># iv</span></span><br><span class="line">c1 = <span class="built_in">hex</span>(bytes_to_long(c[<span class="number">0</span>:<span class="number">16</span>]))[<span class="number">2</span>:]</span><br><span class="line">c2 = <span class="built_in">hex</span>(bytes_to_long(c[<span class="number">16</span>:<span class="number">32</span>]))[<span class="number">2</span>:]</span><br><span class="line">c3 = <span class="built_in">hex</span>(bytes_to_long(c[<span class="number">32</span>:<span class="number">48</span>]))[<span class="number">2</span>:]</span><br><span class="line">a1 = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/ecbcbcwtf/decrypt/<span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line">a2 = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/ecbcbcwtf/decrypt/<span class="subst">&#123;c3&#125;</span>&#x27;</span>)</span><br><span class="line">m1 = a1.json()[<span class="string">&quot;plaintext&quot;</span>]</span><br><span class="line">m2 = a2.json()[<span class="string">&quot;plaintext&quot;</span>]</span><br><span class="line">m1 = <span class="built_in">int</span>(m1, <span class="number">16</span>) ^ <span class="built_in">int</span>(c1, <span class="number">16</span>)</span><br><span class="line">m2 = <span class="built_in">int</span>(m2, <span class="number">16</span>) ^ <span class="built_in">int</span>(c2, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1) + long_to_bytes(m2))</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;3cb_5uck5_4v01d_17_!!!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="ECB-ORACLE"><a href="#ECB-ORACLE" class="headerlink" title="ECB ORACLE"></a>ECB ORACLE</h4><h5 id="hint-3"><a href="#hint-3" class="headerlink" title="hint"></a>hint</h5><p>ECB是最简单的模式，每个明文块都完全独立加密。在这种情况下，您的输入将被添加到秘密flag之前并加密，仅此而已。我们甚至不提供解密功能。也许当你有一个“ECB的预言者”时，你就不需要填充预言了？</p><h5 id="SOURCE-3"><a href="#SOURCE-3" class="headerlink" title="SOURCE"></a>SOURCE</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line">KEY = ?</span><br><span class="line">FLAG = ?</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/ecb_oracle/encrypt/&lt;plaintext&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">plaintext</span>):</span><br><span class="line">    plaintext = <span class="built_in">bytes</span>.fromhex(plaintext)</span><br><span class="line"></span><br><span class="line">    padded = pad(plaintext + FLAG.encode(), <span class="number">16</span>)</span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        encrypted = cipher.encrypt(padded)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;ciphertext&quot;</span>: encrypted.<span class="built_in">hex</span>()&#125;</span><br></pre></td></tr></table></figure><h5 id="WriteUp-3"><a href="#WriteUp-3" class="headerlink" title="WriteUp"></a>WriteUp</h5><p>本题为一道典型的ECB加密解密问题，首先，我们既不知道明文也不知道密文，由题目所给的加密算法，先尝试得到加密块大小和flag长度(?是要求的明文，F是ECB模式填充的字节，p是已求出的明文)。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241116201256839.png" alt="image-20241116201256839"></p><p>先用一个字符”a”去encrypt返回32个字节的数据(64位16进制)，再依次用”aa”,”aaa”,…去encrypt，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">    <span class="comment"># 0x61 a</span></span><br><span class="line">    m = i*<span class="string">&#x27;61&#x27;</span></span><br><span class="line">    result = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/ecb_oracle/encrypt/<span class="subst">&#123;m&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = result.json()[<span class="string">&quot;ciphertext&quot;</span>]</span><br><span class="line">        <span class="built_in">print</span>(i, <span class="built_in">len</span>(a)//<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 1 32</span></span><br><span class="line"><span class="comment"># 2 32</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 6 32</span></span><br><span class="line"><span class="comment"># 7 48</span></span><br><span class="line"><span class="comment"># 8 48</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 22 48</span></span><br><span class="line"><span class="comment"># 23 64</span></span><br><span class="line"><span class="comment"># 24 64</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 30 64</span></span><br></pre></td></tr></table></figure><p>可见6个”a”的时候返回32个字节的数据，7个”a”的时候返回48个字节的数据，22个”a”的时候返回64个字节的数据，23个”a”的时候返回48个字节的数据。所以<strong>块大小</strong>就是16字节（22-6)，<strong>明文（flag）大小</strong>就是26个字节（32-6）。接着<strong>暴力破解</strong>求明文。</p><blockquote><p>aaaaaaaaaaaaaaa? ??????????????? ?????????FFFFFFF</p><p>aaaaaaaaaaaaaa?? ??????????????? ????????FFFFFFFF</p><p>aaaaaaaaaaaaa??? ??????????????? ???????FFFFFFFFF</p><p>aaaaaaaaaaaa???? ??????????????? ?????FFFFFFFFFFF</p></blockquote><p><strong>求第一位：</strong></p><p>15个”a”时返回的前16个字节只有最后一个字节未知，可以暴力遍历出第一个字节，也就是用15*”a”+flag第一个字节的加密密文与暴力遍历的加密密文去匹配。<strong>2-15位同理。</strong></p><p><strong>16-26位：</strong></p><p>与上述方法同理。</p><blockquote><p>aaaaaaaaaaaaaaaa ppppppppppppppp? ??????????FFFFFF</p><p>aaaaaaaaaaaaaaap ppppppppppppppp? ?????????FFFFFFF</p><p>aaaaaaaaaaaaaapp ppppppppppppppp? ????????FFFFFFFF</p><p>aaaaaaaaaaaaappp ppppppppppppppp? ???????FFFFFFFFF</p><p>aaaaaaaaaaaapppp ppppppppppppppp? ??????FFFFFFFFFF</p></blockquote><h5 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    t = <span class="string">&#x27;61&#x27;</span> * (<span class="number">15</span> - i)</span><br><span class="line">    test_result = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/ecb_oracle/encrypt/<span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line">    tr = test_result.json()[<span class="string">&quot;ciphertext&quot;</span>][:<span class="number">32</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        t = <span class="string">&#x27;61&#x27;</span> * (<span class="number">15</span> - i) + m</span><br><span class="line">        t += <span class="built_in">str</span>(<span class="built_in">hex</span>(j)[<span class="number">2</span>:])</span><br><span class="line">        brute_result = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/ecb_oracle/encrypt/<span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(brute_result)</span><br><span class="line">        br = brute_result.json()[<span class="string">&quot;ciphertext&quot;</span>][:<span class="number">32</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> tr == br:</span><br><span class="line">                m += <span class="built_in">str</span>(<span class="built_in">hex</span>(j)[<span class="number">2</span>:])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># bytes.fromhex(m) = &#x27;crypto&#123;p3n6u1n5&#x27;</span></span><br><span class="line">m = <span class="string">&#x27;63727970746f7b70336e3675316e35&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    t = <span class="string">&#x27;61&#x27;</span> * (<span class="number">16</span> - i)</span><br><span class="line">    test_result = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/ecb_oracle/encrypt/<span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line">    tr = test_result.json()[<span class="string">&quot;ciphertext&quot;</span>][<span class="number">32</span>:<span class="number">64</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        t = <span class="string">&#x27;61&#x27;</span> * (<span class="number">16</span> - i) + m</span><br><span class="line">        t += <span class="built_in">str</span>(<span class="built_in">hex</span>(j)[<span class="number">2</span>:])</span><br><span class="line">        brute_result = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/ecb_oracle/encrypt/<span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line">        br = brute_result.json()[<span class="string">&quot;ciphertext&quot;</span>][<span class="number">32</span>:<span class="number">64</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> tr == br:</span><br><span class="line">                m += <span class="built_in">str</span>(<span class="built_in">hex</span>(j)[<span class="number">2</span>:])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(m))</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;p3n6u1n5_h473_3cb&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Flipping-Cookie"><a href="#Flipping-Cookie" class="headerlink" title="Flipping Cookie"></a>Flipping Cookie</h4><h5 id="hint-4"><a href="#hint-4" class="headerlink" title="hint"></a>hint</h5><p>你可以在我的网站上得到一个cookie，但它不会帮助你获得flag…我想。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241117101904528.png" alt="image-20241117101904528"></p><h5 id="SOURCE-4"><a href="#SOURCE-4" class="headerlink" title="SOURCE"></a>SOURCE</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">KEY = ?</span><br><span class="line">FLAG = ?</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/flipping_cookie/check_admin/&lt;cookie&gt;/&lt;iv&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_admin</span>(<span class="params">cookie, iv</span>):</span><br><span class="line">    cookie = <span class="built_in">bytes</span>.fromhex(cookie)</span><br><span class="line">    iv = <span class="built_in">bytes</span>.fromhex(iv)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cipher = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">        decrypted = cipher.decrypt(cookie)</span><br><span class="line">        unpadded = unpad(decrypted, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;admin=True&quot;</span> <span class="keyword">in</span> unpadded.split(<span class="string">b&quot;;&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;flag&quot;</span>: FLAG&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Only admin can read the flag&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/flipping_cookie/get_cookie/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>():</span><br><span class="line">    expires_at = (datetime.today() + timedelta(days=<span class="number">1</span>)).strftime(<span class="string">&quot;%s&quot;</span>)</span><br><span class="line">    cookie = <span class="string">f&quot;admin=False;expiry=<span class="subst">&#123;expires_at&#125;</span>&quot;</span>.encode()</span><br><span class="line"></span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    padded = pad(cookie, <span class="number">16</span>)</span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">    encrypted = cipher.encrypt(padded)</span><br><span class="line">    ciphertext = iv.<span class="built_in">hex</span>() + encrypted.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;cookie&quot;</span>: ciphertext&#125;</span><br></pre></td></tr></table></figure><h5 id="WriteUp-4"><a href="#WriteUp-4" class="headerlink" title="WriteUp"></a>WriteUp</h5><p>这是一道典型的CBC字节反转攻击。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241117102006026.png" alt="image-20241117102006026"></p><p>题目给出了两个函数<code>check_admin(cookie, iv)</code>和<code>get_cookie()</code>。</p><p>第一个函数将输入的<code>cookie</code>和<code>IV</code>进行<code>AES-BCB模式解密</code>，当解密得到的字符串满足以<code>;</code>为分割后存在<code>admin=True</code>的字符串的时候就会把flag输出出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">b&quot;admin=True&quot;</span> <span class="keyword">in</span> unpadded.split(<span class="string">b&quot;;&quot;</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;flag&quot;</span>: FLAG&#125;</span><br></pre></td></tr></table></figure><p>第二个函数会将 <code>cookie</code>这个字符串和一个<code>IV</code>经过<code>AES-BCB模式加密</code>后的结果同加密所用到的<code>IV</code>输出出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">expires_at = (datetime.today() + timedelta(days=<span class="number">1</span>)).strftime(<span class="string">&quot;%s&quot;</span>)</span><br><span class="line">cookie = <span class="string">f&quot;admin=False;expiry=<span class="subst">&#123;expires_at&#125;</span>&quot;</span>.encode()</span><br><span class="line"></span><br><span class="line">ciphertext = iv.<span class="built_in">hex</span>() + encrypted.<span class="built_in">hex</span>()</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="string">&quot;cookie&quot;</span>: ciphertext&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过构造新的<code>IV</code>同原来的密文进行解密从而更改解密后的内容最终拿到flag。<br>$$<br>IV⊕Old&#x3D;T\T⊕IV&#x3D;Old\T⊕(IV⊕New⊕Old)&#x3D;Old⊕Old⊕New&#x3D;New\IV_new&#x3D;IV⊕New⊕Old\<br>$$<br>由上面的推导式<br>$$<br>IV_new&#x3D;IV⊕New⊕Old<br>$$<br>所以可得EXP。</p><h5 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">result = requests.get(<span class="string">&#x27;http://aes.cryptohack.org/flipping_cookie/get_cookie&#x27;</span>)</span><br><span class="line">cookie = result.json()[<span class="string">&quot;cookie&quot;</span>]</span><br><span class="line">cookie_bytes = <span class="built_in">bytes</span>.fromhex(cookie)</span><br><span class="line">iv = cookie_bytes[:<span class="number">16</span>]</span><br><span class="line">iv_hex = <span class="built_in">hex</span>(bytes_to_long(iv))</span><br><span class="line">c = cookie_bytes[<span class="number">16</span>:]</span><br><span class="line">c = <span class="built_in">hex</span>(bytes_to_long(c))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">old = <span class="string">b&#x27;admin=False;expi&#x27;</span></span><br><span class="line">new = <span class="string">b&#x27;admin=True;00000&#x27;</span></span><br><span class="line">m1 = <span class="built_in">hex</span>(bytes_to_long(old))</span><br><span class="line">m2 = <span class="built_in">hex</span>(bytes_to_long(new))</span><br><span class="line">iv_new = <span class="built_in">int</span>(m1, <span class="number">16</span>) ^ <span class="built_in">int</span>(m2, <span class="number">16</span>) ^ <span class="built_in">int</span>(iv_hex, <span class="number">16</span>)</span><br><span class="line">iv_new = <span class="built_in">hex</span>(iv_new)[<span class="number">2</span>:]</span><br><span class="line">result2 = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/flipping_cookie/check_admin/<span class="subst">&#123;c&#125;</span>/<span class="subst">&#123;iv_new&#125;</span>&#x27;</span>)</span><br><span class="line">flag = result2.json()[<span class="string">&quot;flag&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># crypto&#123;4u7h3n71c4710n_15_3553n714l&#125;</span></span><br></pre></td></tr></table></figure><h5 id="附"><a href="#附" class="headerlink" title="附"></a>附</h5><p>本题需要修改的内容刚好在第一组里，如果修改内容在其他组，如第二组，则需要构造新的第一组的密文，构造规则与推导式相同：<br>$$<br>新的密文&#x3D;前一组的密文⊕原来的明文⊕新的明文<br>$$<br>只不过可能会需要同时构造新的<code>IV</code>，使新的密文同新的<code>IV</code>解密结果同以前相同。</p><h4 id="Lazy-CBC"><a href="#Lazy-CBC" class="headerlink" title="Lazy CBC"></a>Lazy CBC</h4><h5 id="hint-5"><a href="#hint-5" class="headerlink" title="hint"></a>hint</h5><p>我只是一个懒惰的开发人员，希望我的CBC加密能够正常工作。这些关于初始化向量的讨论是什么？听起来并不重要。</p><h5 id="SOURCE-5"><a href="#SOURCE-5" class="headerlink" title="SOURCE"></a>SOURCE</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">KEY = ?</span><br><span class="line">FLAG = ?</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/lazy_cbc/encrypt/&lt;plaintext&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">plaintext</span>):</span><br><span class="line">    plaintext = <span class="built_in">bytes</span>.fromhex(plaintext)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(plaintext) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Data length must be multiple of 16&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_CBC, KEY)</span><br><span class="line">    encrypted = cipher.encrypt(plaintext)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;ciphertext&quot;</span>: encrypted.<span class="built_in">hex</span>()&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/lazy_cbc/get_flag/&lt;key&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">key</span>):</span><br><span class="line">    key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key == KEY:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;plaintext&quot;</span>: FLAG.encode().<span class="built_in">hex</span>()&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;invalid key&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/lazy_cbc/receive/&lt;ciphertext&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ciphertext) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Data length must be multiple of 16&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_CBC, KEY)</span><br><span class="line">    decrypted = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted.decode() <span class="comment"># ensure plaintext is valid ascii</span></span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Invalid plaintext: &quot;</span> + decrypted.<span class="built_in">hex</span>()&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;success&quot;</span>: <span class="string">&quot;Your message has been received&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="WriteUp-5"><a href="#WriteUp-5" class="headerlink" title="WriteUp"></a>WriteUp</h5><p>CBC的生成思路如下：<br>$$<br>m_1&#x3D;decrypt(c_1)\oplus{IV}\m_2&#x3D;decrypt(c_2)\oplus{m_1}\m_3&#x3D;decrypt(c_3)\oplus{m_2}<br>$$<br>本题给出了密文的生成代码，密文的解密代码以及flag的获得代码，且密文明文都可以由自己设置，我们不妨设如下特殊情况<br>$$<br>c_2&#x3D;0,c_1&#x3D;c_3\m_1\oplus{m_3}&#x3D;decrypt(c_1)\oplus{IV}\oplus{decrypt(c_1)}\oplus{m_2}&#x3D;IV<br>$$<br>即可得到<code>IV</code>，在本题中，<code>IV</code>即为所求<code>KEY</code>。</p><h5 id="EXP-4"><a href="#EXP-4" class="headerlink" title="EXP"></a>EXP</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># t1 = &#x27;61&#x27; * 48</span></span><br><span class="line"><span class="comment"># result1 = requests.get(f&#x27;http://aes.cryptohack.org/lazy_cbc/encrypt/&#123;t1&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># c = result1.json()[&quot;ciphertext&quot;]</span></span><br><span class="line"><span class="comment"># t2 = c[:32] + &#x27;0&#x27; * 32 + c[:32]</span></span><br><span class="line"><span class="comment"># result2 = requests.get(f&#x27;http://aes.cryptohack.org/lazy_cbc/receive/&#123;t2&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># m1 = result2.json()</span></span><br><span class="line"><span class="comment"># print(m1)</span></span><br><span class="line">m1 = <span class="string">&#x27;61616161616161616161616161616161a381f13463f0698d5b8c9bc4af21c08e8a67784df1eb484abc01811d2bfbacd7&#x27;</span></span><br><span class="line">key = <span class="built_in">hex</span>(<span class="built_in">int</span>(m1[:<span class="number">32</span>], <span class="number">16</span>) ^ <span class="built_in">int</span>(m1[<span class="number">64</span>:], <span class="number">16</span>))[<span class="number">2</span>:]</span><br><span class="line">result3 = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/lazy_cbc/get_flag/<span class="subst">&#123;key&#125;</span>&#x27;</span>)</span><br><span class="line">m = result3.json()[<span class="string">&quot;plaintext&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(m))</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;50m3_p30pl3_d0n7_7h1nk_IV_15_1mp0r74n7_?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Triple-DES"><a href="#Triple-DES" class="headerlink" title="Triple DES"></a>Triple DES</h4><h5 id="hint-6"><a href="#hint-6" class="headerlink" title="hint"></a>hint</h5><p>数据加密标准(DES)是AES的前身，目前仍广泛应用于支付卡行业等一些发展缓慢的领域。这一挑战展示了DES的一个奇怪弱点，而安全分组密码不应该有这个弱点。</p><h5 id="SOURCE-6"><a href="#SOURCE-6" class="headerlink" title="SOURCE"></a>SOURCE</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">IV = os.urandom(<span class="number">8</span>)</span><br><span class="line">FLAG = ?</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="comment"># xor 2 bytestrings, repeating the 2nd one if necessary</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(x ^ y <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b * (<span class="number">1</span> + <span class="built_in">len</span>(a) // <span class="built_in">len</span>(b))))</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/triple_des/encrypt/&lt;key&gt;/&lt;plaintext&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key, plaintext</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line">        plaintext = <span class="built_in">bytes</span>.fromhex(plaintext)</span><br><span class="line">        plaintext = xor(plaintext, IV)</span><br><span class="line"></span><br><span class="line">        cipher = DES3.new(key, DES3.MODE_ECB)</span><br><span class="line">        ciphertext = cipher.encrypt(plaintext)</span><br><span class="line">        ciphertext = xor(ciphertext, IV)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;ciphertext&quot;</span>: ciphertext.<span class="built_in">hex</span>()&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@chal.route(<span class="params"><span class="string">&#x27;/triple_des/encrypt_flag/&lt;key&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_flag</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">return</span> encrypt(key, pad(FLAG.encode(), <span class="number">8</span>).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><h5 id="WriteUp-6"><a href="#WriteUp-6" class="headerlink" title="WriteUp"></a>WriteUp</h5><p><a href="https://en.wikipedia.org/wiki/Weak_key#Weak_keys_in_DES">DES Weak key</a></p><p>DES有几个特定的弱密钥和半弱密钥，会使DES的加密模式和解密模式完全相同，本题给出了<code>encrypt_flag(key)</code>和<code>encrypt(key, plaintext)</code>两个函数，key使用弱密钥，得到flag的密文，然后用key和flag的密文再一次加密，由于使用了弱密钥，加密与解密一致，对flag的密文用同样的key再加密一次即为解密，得到明文。</p><h5 id="EXP-5"><a href="#EXP-5" class="headerlink" title="EXP"></a>EXP</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">key1 = <span class="string">b&#x27;\xfe&#x27;</span> * <span class="number">8</span></span><br><span class="line">key2 = <span class="string">b&#x27;\x01&#x27;</span> * <span class="number">8</span></span><br><span class="line">key3 = <span class="string">b&#x27;\xe0&#x27;</span> * <span class="number">4</span> + <span class="string">b&#x27;\xf1&#x27;</span> * <span class="number">4</span></span><br><span class="line">key4 = <span class="string">b&#x27;\x1f&#x27;</span> * <span class="number">4</span> + <span class="string">b&#x27;\x0e&#x27;</span> * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">key = key3 + key4</span><br><span class="line">result1 = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/triple_des/encrypt_flag/<span class="subst">&#123;key.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">c = result1.json()[<span class="string">&quot;ciphertext&quot;</span>]</span><br><span class="line">result2 = requests.get(<span class="string">f&#x27;http://aes.cryptohack.org/triple_des/encrypt/<span class="subst">&#123;key.<span class="built_in">hex</span>()&#125;</span>/<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">m = result2.json()[<span class="string">&quot;ciphertext&quot;</span>]</span><br><span class="line">flag = <span class="built_in">bytes</span>.fromhex(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;n0t_4ll_k3ys_4r3_g00d_k3ys&#125;\x06\x06\x06\x06\x06\x06&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cryptohack-LATTICES</title>
      <link href="/2024/11/12/Cryptohack_Lattices/"/>
      <url>/2024/11/12/Cryptohack_Lattices/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="EVawP">Cryptohack-LATTICES</h1><h2 id="ltk0a">LATTICES</h2><h3 id="NSYXj">1 Vectors</h3>在某个域![image](https://cdn.nlark.com/yuque/__latex/7aaf2781990aa336d909f7ebd32e2f69.svg)![image](https://cdn.nlark.com/yuque/__latex/c27929eb227b5bf6b840f886f1608415.svg)![image](https://cdn.nlark.com/yuque/__latex/9f493997c33913987175caf4a4849955.svg)是用两个二元运算符定义的集合。<p>对于一个向量<img src="https://cdn.nlark.com/yuque/__latex/bd76aa89a34eec3ef918d32fff708027.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/1a4411060cb2885ca41fa1edef866dd4.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/fe1485b32149a85d8d86dfe19e63719c.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/87bbc36e907e26e551823e0e4e009535.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/2a5d790aebc64df0acc7b00fb2e6b2f5.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/92cb65553872c9e62201ffa767f470ae.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/2773f8bf16fe98eb742ba158e525bbcd.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/af036c12b33890c86d0a839c28946292.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/741fdd5f2064ebfcbadc233c02bee9c4.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/92cb65553872c9e62201ffa767f470ae.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/7e76c30e588807f1c188eeeedcb0988a.svg" alt="image">.</p><p>考虑实数域上的二维向量空间，一个向量<img src="https://cdn.nlark.com/yuque/__latex/bd76aa89a34eec3ef918d32fff708027.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/ff521cc6678e313a1262814245134f86.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/7a003fd2c4931e3753e3126efe410bfc.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/92cb65553872c9e62201ffa767f470ae.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/353a8628dc9de7c1e6aa9d24430e687f.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/d543f05f962fd80146a8f49fc1e194f6.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/4e200a31e64d3f194191f3fa2026778f.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/63c67fd2aea3d99821b6865a185f061a.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/d9bd49c35f326caeac5787e7610ef7c7.svg" alt="image">.</p><p>还可以定义内积（也称为点积），它取两个向量并返回一个标量。从形式上讲，我们认为：对于<img src="https://cdn.nlark.com/yuque/__latex/741fdd5f2064ebfcbadc233c02bee9c4.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/92cb65553872c9e62201ffa767f470ae.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/6ed2f1f3ccd531d9dbfbc31321bb8698.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/2dde94714f92b8a04e7ef08c2483e572.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/4c467da85a250769e4623b8cc41c681a.svg" alt="image">.</p><p>题目：</p><p>给出以下三个向量<code>v = (2,6,3)</code>，<code>w = (1,0,0)</code>，<code>u = (7,7,2)</code>，计算<code>3*(2*v - w) · 2*u</code>。</p><p>考察：基本的向量与标量之间的运算</p><p>直接计算或使用SageMath计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v = vector([2,6,3])</span><br><span class="line">w = vector([1,0,0])</span><br><span class="line">u = vector([7,7,2])</span><br><span class="line">3*(2*v - w)*2*u</span><br><span class="line"># 702</span><br></pre></td></tr></table></figure><h3 id="OTERW">2 Size and Basis</h3>一组向量![image](https://cdn.nlark.com/yuque/__latex/50d688421c9a2f8ad2e38e65e59d2012.svg)是线性无关的，当且仅当<p><img src="https://cdn.nlark.com/yuque/__latex/8b7df9d6185eda078aebd644d29ac927.svg" alt="image"></p><p>仅在<img src="https://cdn.nlark.com/yuque/__latex/51b8ad6a62fe4a44eccc50b7f3c93597.svg" alt="image">时成立</p><p>基是一组线性独立的向量<img src="https://cdn.nlark.com/yuque/__latex/34ab041e12ce8876aee60d913474c5d4.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/bad26a890068f4821dae78adb7e1281b.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/26f57414235c49c1f60fd1a52e50c330.svg" alt="image">可以写成：</p><p><img src="https://cdn.nlark.com/yuque/__latex/723ac08c7132d8f3604449dd074891a0.svg" alt="image"></p><p><code>基中的元素数量</code>是<code>向量空间的维数</code></p><p>向量的大小，定义为<code>||v||</code>，向量自己和自己做内积：<img src="https://cdn.nlark.com/yuque/__latex/4299ed8dc0b338d3c39a4d69c532d852.svg" alt="image"></p><p>一组<code>正交基(orthogonal)</code>是指一组向量基<img src="https://cdn.nlark.com/yuque/__latex/34ab041e12ce8876aee60d913474c5d4.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/62ce71a5194b595acb1388a587569381.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/7c002cad49fddf55ae041b2f25600977.svg" alt="image">.</p><p>一组<code>标准正交基(orthonormal)</code>是指一组正交基，对于所有<img src="https://cdn.nlark.com/yuque/__latex/2443fbcfeb7e85e1d62b6f5e4f27207e.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/ad6f0ca8b0f9e5f77feb85b115ff2da7.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/f38232e74283833fbdac50d2e0fbf6c5.svg" alt="image">.</p><p>题目：</p><p>给出一个向量<code>v=(4,6,2,5)</code>，计算它的大小。</p><p>考察：求向量的大小或者说向量的模</p><p>直接计算或使用SageMath计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v = vector([4,6,2,5])</span><br><span class="line">norm(v)</span><br><span class="line"># 9</span><br></pre></td></tr></table></figure><h3 id="Y2khY">3 Gram Schmidt</h3>给出一组向量空间的基![image](https://cdn.nlark.com/yuque/__latex/34ab041e12ce8876aee60d913474c5d4.svg)![image](https://cdn.nlark.com/yuque/__latex/bec09c54b3ce1bc3e776c3d6f81854ea.svg)![image](https://cdn.nlark.com/yuque/__latex/f35fcc40180e4eae25a7831d83f36c94.svg).<p>在Jeffrey Hoffstein、Jill Pipher、Joseph H.Silverman所著的《数学密码学导论》中，格拉姆-施密特算法如下：</p><blockquote><p>格拉姆-施密特算法</p><p><img src="https://cdn.nlark.com/yuque/__latex/88064748c77660277046b00136c3e5a9.svg" alt="image"></p><p>Loop <img src="https://cdn.nlark.com/yuque/__latex/2443fbcfeb7e85e1d62b6f5e4f27207e.svg" alt="image"> &#x3D; 2,3…,n</p><pre><code>Compute ![image](https://cdn.nlark.com/yuque/__latex/deb2ba02ec861b30c4b3e09545ca2650.svg).Set ![image](https://cdn.nlark.com/yuque/__latex/09d59ea56fd5c0e0ab91c8ef8edaa893.svg)![image](https://cdn.nlark.com/yuque/__latex/0f1231fc681b70b58eecc86414a9b617.svg)![image](https://cdn.nlark.com/yuque/__latex/036441a335dd85c838f76d63a3db2363.svg)![image](https://cdn.nlark.com/yuque/__latex/cf080bb827fec523d15c45647f2c3992.svg)![image](https://cdn.nlark.com/yuque/__latex/c8523dac018ed8882ef4b62d42f1cd01.svg))</code></pre><p>End Loop</p></blockquote><p>题目：</p><p>给出以下一组基向量：</p><p><img src="https://cdn.nlark.com/yuque/__latex/6d546452ade9ccb49f316df2444204cb.svg" alt="image"></p><p>使用格拉姆-施密特算法计算正交基。flag是<img src="https://cdn.nlark.com/yuque/__latex/f10654576eabd74eeacf4f484708e776.svg" alt="image">的第二个成员的浮点数值，保留小数点后五位。</p><p>考察：格拉姆-施密特算法计算正交基</p><p>使用SageMath计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v0 = vector([4,1,3,-1])</span><br><span class="line">v1 = vector([2,1,-3,4])</span><br><span class="line">v2 = vector([1,0,-2,7])</span><br><span class="line">v3 = vector([6,2,9,-5])</span><br><span class="line">M = Matrix([v0,v1,v2,v3])</span><br><span class="line">M_GS = M.gram_schmidt()</span><br><span class="line">round(M_GS[0][3][1],5)</span><br><span class="line"># 0.91611</span><br></pre></td></tr></table></figure><p>贴一个Python的Solution：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">v = [</span><br><span class="line">    np.array([<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,-<span class="number">1</span>]),</span><br><span class="line">    np.array([<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>]),</span><br><span class="line">    np.array([<span class="number">1</span>,<span class="number">0</span>,-<span class="number">2</span>,<span class="number">7</span>]),</span><br><span class="line">    np.array([<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span>,-<span class="number">5</span>])</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">u1 = v1</span></span><br><span class="line"><span class="string">Loop i = 2,3...,n</span></span><br><span class="line"><span class="string">   Compute μij = vi ∙ uj / ||uj||2, 1 ≤ j &lt; i.</span></span><br><span class="line"><span class="string">   Set ui = vi - μij * uj (Sum over j for 1 ≤ j &lt; i)</span></span><br><span class="line"><span class="string">End Loop</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">u = [v[<span class="number">0</span>]]</span><br><span class="line"><span class="keyword">for</span> vi <span class="keyword">in</span> v[<span class="number">1</span>:]:</span><br><span class="line">    mi = [np.dot(vi, uj) / np.dot(uj,uj) <span class="keyword">for</span> uj <span class="keyword">in</span> u]</span><br><span class="line">    u += [vi - <span class="built_in">sum</span>([mij * uj <span class="keyword">for</span> (mij, uj) <span class="keyword">in</span> <span class="built_in">zip</span>(mi,u)])]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(u[<span class="number">3</span>][<span class="number">1</span>], <span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="Bm7Nw">4 What's a Lattice?</h3>给出一组线性无关的向量![image](https://cdn.nlark.com/yuque/__latex/f13df0dd0919a5d2320ecf81d9bad285.svg)![image](https://cdn.nlark.com/yuque/__latex/4349d803db10acbaba1277adf93b14b8.svg)![image](https://cdn.nlark.com/yuque/__latex/357fd1b324f53cd83804458f8e87b7fc.svg)![image](https://cdn.nlark.com/yuque/__latex/7730bc0b879e5c33abe31514a71c6bbe.svg)![image](https://cdn.nlark.com/yuque/__latex/c895173d3be4872abf206be4268a58cb.svg)![image](https://cdn.nlark.com/yuque/__latex/385152937a9a710a5eca1b12c1e07246.svg)![image](https://cdn.nlark.com/yuque/__latex/357fd1b324f53cd83804458f8e87b7fc.svg)和对应整系数的组合。<p><img src="https://cdn.nlark.com/yuque/__latex/3b6443fabc6fb776d415211732329c56.svg" alt="image"></p><p>格<img src="https://cdn.nlark.com/yuque/__latex/c895173d3be4872abf206be4268a58cb.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/6b6e7e94f2cab303f1489eb08edd4f12.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/393c9d8c00912297293bd58bae17ac79.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/55594b170f29da9dac13eb7cafd6dff1.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/2a6278724b813cac1c188d8aa2fb1e67.svg" alt="image">生成的二维格。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241104210111547.png"></p><p>使用基向量，我们可以用基向量的整数倍乘来到达格内的任意一点。基向量还定义了基本域：</p><p><img src="https://cdn.nlark.com/yuque/__latex/78d6efb5a49cb0198b0490eb141ffe46.svg" alt="image"></p><p>举一个二维的例子，基本域是由边<img src="https://cdn.nlark.com/yuque/__latex/91a8139c06c08372c8948b7db768f53a.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/55594b170f29da9dac13eb7cafd6dff1.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/308df52f26bb292e4c093fa6f85bc137.svg" alt="image">构成的平行四边形。</p><p>我们可以通过基向量计算基本域的体积。例如，取一个以<img src="https://cdn.nlark.com/yuque/__latex/29adee2a969920cd22db6c334cfc5f49.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/55bfe62c381719d8efeab147e92b6114.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/de951302f41d4707b9d80ca1af34dd0f.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/cba9165a90def72e70dd26a8e8a66c1f.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/77def391f9779dcf539c8e6438cf0cbf.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/dd4ce905dd73a1f9ece948514f4e5695.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/de951302f41d4707b9d80ca1af34dd0f.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/86a38a27f67bf8450a78c79395f46eee.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/3f7baf3275b74ed07e32d69f28458e08.svg" alt="image">.</p><p>题目：</p><p>计算由基向量<img src="https://cdn.nlark.com/yuque/__latex/a4c8baf0453350ea290e9e980c5f84e2.svg" alt="image">构成的基本域的体积。</p><p>考察：基向量构成的基本域的体积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v = vector</span><br><span class="line">v1 = v([6,2,-3])</span><br><span class="line">v2 = v([5,1,4])</span><br><span class="line">v3 = v([2,7,1])</span><br><span class="line">A = matrix([v1,v2,v3])</span><br><span class="line">det(A)</span><br></pre></td></tr></table></figure><h3 id="UhAkM">5 Gaussian Reduction</h3>如果你仔细观察，格密码开始在密码学中无处不在。有时，它们通过操纵加密系统出现，破坏了不够安全地生成的参数。最著名的例子是Coppersmith对RSA密码学的攻击。<p>格密码也可用于构建加密协议，其安全性基于两个基本的困难问题：</p><p><strong>最短向量问题（SVP）</strong>：在格L中找到最短的非零向量。换句话说，在<img src="https://cdn.nlark.com/yuque/__latex/1ded757481d92730b071dc05e5c34ff6.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/740b9b190c9c5551c5f37ab875aca298.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/293a3a2ac75ff6235bc12dff851b7292.svg" alt="image">取最小值。</p><p><strong>最近向量问题（CVP）</strong>：给定一个不在L中的向量<img src="https://cdn.nlark.com/yuque/__latex/6bb26cea58333ccec9596c08e5cbc0f2.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/2979b8d34cdc5266d6ca527f61aa2d9b.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/c9b08ae6d9fed72562880f75720531bc.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/4e18d7e6f3c40c46dfa7be7b98ed7a14.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/1ded757481d92730b071dc05e5c34ff6.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/cf9ce3c2f45ef18bf99d0302fb534904.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/1ded757481d92730b071dc05e5c34ff6.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/566a16212c40fd7b9a389dca9b15c490.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/c42ca5af044b8db5f4a7c358e90d339e.svg" alt="image">取最小值。</p><p>对于一般格来说，SVP很难，但对于足够简单的情况，有有效的算法来计算SVP的解或近似值。当格的维数为4或更小时，我们可以在多项式时间内精确计算；对于更高的维度，我们不得不接受一个近似值。</p><p>高斯开发了他的算法，为给定任意基的二维格找到最优基。此外，该算法的输出<img src="https://cdn.nlark.com/yuque/__latex/d75b72964639f9b1f76c46198a46c47f.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/cacb240434eec866b72ab3f995aea68b.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/c895173d3be4872abf206be4268a58cb.svg" alt="image">中最短的非零向量，因此求解了SVP。</p><blockquote><p>ps:对于更高维度，有一种称为LLL算法的格基约减算法，以Lenstra、Lenstra和Lovász的名字命名。如果你经常玩CTF，你就一定会知道。LLL算法在多项式时间内运行。不过，就目前而言，让我们停留在二维空间。</p></blockquote><p>高斯的算法大致通过从另一个基向量中减去一个基向量的倍数来工作，直到不再可能使它们更小。由于这是在二维中工作的，因此很容易可视化。以下是Jeffrey Hoffstein、Jill Pipher和Joseph H.Silverman在《数学密码学导论》中对算法的描述：</p><blockquote><p>高斯格约化算法</p><p>Loop</p><pre><code>(a) If ![image](https://cdn.nlark.com/yuque/__latex/78b3019f777ed765b8eab6f271cf6bbc.svg)![image](https://cdn.nlark.com/yuque/__latex/bbee8a19fe3ae0ef1ea2fbea80c7dae2.svg)![image](https://cdn.nlark.com/yuque/__latex/2a6278724b813cac1c188d8aa2fb1e67.svg)(b) Compute ![image](https://cdn.nlark.com/yuque/__latex/c1f4edb3625a50fea593fe120f2f3e8e.svg)(c) If ![image](https://cdn.nlark.com/yuque/__latex/9437f896b8b33348628614a568accefc.svg)![image](https://cdn.nlark.com/yuque/__latex/385b2e994620463087b58d66c1d3fae5.svg)![image](https://cdn.nlark.com/yuque/__latex/2a6278724b813cac1c188d8aa2fb1e67.svg)(d) ![image](https://cdn.nlark.com/yuque/__latex/04be7eb35b3fbc29899b7040c01d40b4.svg)</code></pre><p>Continue Loop</p></blockquote><p>请注意，与欧几里德的GCD算法在“交换”和“缩减”步骤上的相似性，我们必须对浮点数进行四舍五入，因为在格上，我们可能只使用整数作为基向量的系数。</p><p>题目：</p><p>取两个向量<img src="https://cdn.nlark.com/yuque/__latex/571db36bfca6f5a5f06e3e30f8fac022.svg" alt="image">，通过高斯算法，找到最优基，flag为新的基向量的内积。</p><p>考察：高斯格约化算法求最优基</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v = vector([846835985, 9834798552])</span><br><span class="line">u = vector([87502093, 123094980])</span><br><span class="line">v1,v2 = u,v</span><br><span class="line">m = 1</span><br><span class="line">while m != 0:</span><br><span class="line">    if norm(v2) &lt; norm(v1):</span><br><span class="line">        print(&#x27;swap&#x27;)</span><br><span class="line">        v1,v2 = v2,v1</span><br><span class="line">    m = int((v1*v2)/(v1*v1))</span><br><span class="line">    v2 = v2 - m*v1</span><br><span class="line">print(v1, v2)</span><br><span class="line">print(v1*v2)</span><br></pre></td></tr></table></figure><h3 id="zJbsy">6 Find the Lattice</h3>正如我们所看到的，格包含一些难题，这些难题可以形成密码系统的陷门函数。我们还发现，在密码分析中，格可以破坏最初似乎与格无关的密码协议。<p>这个挑战使用模块化算法来加密标志，但协议中隐藏着一个二维格。我们强烈建议花时间应对这一挑战，并找到如何用格子打破它。这是一个著名的例子，有很多可用的资源，但知道如何在系统中发现格通常是打破它的关键。</p><p>作为提示，您将能够使用前一个挑战的高斯缩减来完成这个挑战。</p><p>题目代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, inverse, bytes_to_long</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b&#x27;crypto&#123;?????????????????????&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    upper_bound = <span class="built_in">int</span>(math.sqrt(q // <span class="number">2</span>))</span><br><span class="line">    lower_bound = <span class="built_in">int</span>(math.sqrt(q // <span class="number">4</span>))</span><br><span class="line">    f = random.randint(<span class="number">2</span>, upper_bound)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = random.randint(lower_bound, upper_bound)</span><br><span class="line">        <span class="keyword">if</span> math.gcd(f, g) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = (inverse(f, q)*g) % q</span><br><span class="line">    <span class="keyword">return</span> (q, h), (f, g)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">q, h, m</span>):</span><br><span class="line">    <span class="keyword">assert</span> m &lt; <span class="built_in">int</span>(math.sqrt(q // <span class="number">2</span>))</span><br><span class="line">    r = random.randint(<span class="number">2</span>, <span class="built_in">int</span>(math.sqrt(q // <span class="number">2</span>)))</span><br><span class="line">    e = (r*h + m) % q</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">q, h, f, g, e</span>):</span><br><span class="line">    a = (f*e) % q</span><br><span class="line">    m = (a*inverse(f, g)) % g</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public, private = gen_key()</span><br><span class="line">q, h = public</span><br><span class="line">f, g = private</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(FLAG)</span><br><span class="line">e = encrypt(q, h, m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Public key: <span class="subst">&#123;(q,h)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Encrypted Flag: <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>题目输出：</p><blockquote><p>Public key: (7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257, 2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800)<br>Encrypted Flag: 5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523</p></blockquote><p>已知q, h, e，其中</p><p><img src="https://cdn.nlark.com/yuque/__latex/6e1dffa9ebd2b4a7d31cad3cee9583ae.svg" alt="image"></p><blockquote><p>q 512位</p><p>f,g 低于256位</p><p>h,e 512位</p><p>r 256位</p><p>m为flag，大小约为231bit</p></blockquote><p>要求得m，需要获得<code>decrypt</code>的参数，还剩<img src="https://cdn.nlark.com/yuque/__latex/18f3c2855f0e85a1ac2257f64d917144.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/55594b170f29da9dac13eb7cafd6dff1.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/7a1e6a754b7a8e45cb731688765c5e85.svg" alt="image">是未知的，由(6)式中可知</p><p><img src="https://cdn.nlark.com/yuque/__latex/969542d79b5766373046047d46b8deeb.svg" alt="image"></p><p>用上一题格的思想，构造一个由下面这个矩阵<img src="https://cdn.nlark.com/yuque/__latex/6f5dde593f0bc27956e14b5eaec2ed17.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/bde8b8c66cca086df793129eb2e70246.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/0b5ea6aff0d3159cf2cd8e886e37bc5e.svg" alt="image">所张成的Lattice：</p><p><img src="https://cdn.nlark.com/yuque/__latex/d173f3b3fe16d4ab341d6c40d3e776eb.svg" alt="image"></p><p>向量<img src="https://cdn.nlark.com/yuque/__latex/6348f6830dbfbb654db0b335a9b2d010.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/f8f3c54a01d4d6488ec7e5324ec4b8cb.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/8a92b607130b5be247860cc37d34eca7.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/94362838ca2410472d7364c61a4229ce.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/d33e86ee07ddb8d97d89f08e0361648e.svg" alt="image"></p><p><img src="https://cdn.nlark.com/yuque/__latex/d2b4f725f2d2c9edfd8805cde763811e.svg" alt="image"></p><p>即<img src="https://cdn.nlark.com/yuque/__latex/c81a489eb0d655ceaf033a1d326b533b.svg" alt="image">满足条件</p><p>向量<img src="https://cdn.nlark.com/yuque/__latex/6348f6830dbfbb654db0b335a9b2d010.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/c584a5da9bf585fd5be912f13acb98bf.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/6f5dde593f0bc27956e14b5eaec2ed17.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/358c9412ab28558be2e3d4d1eef84309.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/33604ee711dc2490851f73504ebce189.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/4c2af1329d04951aa6933a2123f48aa0.svg" alt="image"><img src="https://cdn.nlark.com/yuque/__latex/6348f6830dbfbb654db0b335a9b2d010.svg" alt="image">就在这个Lattice上。</p><p>对于两个基底向量，(1,h):512位,(0,q):512位</p><p>而向量<img src="https://cdn.nlark.com/yuque/__latex/6348f6830dbfbb654db0b335a9b2d010.svg" alt="image">的长度约为256位，相比于基底向量极小，很大概率为此Lattice的最短向量。</p><p>EXP(SageMath):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gauss Lattice Reduction</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Gauss</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> norm(v2) &lt; norm(v1):</span><br><span class="line">            v1, v2 = v2, v1</span><br><span class="line">        m = <span class="built_in">round</span>( v1*v2 / norm(v1)^<span class="number">2</span> )</span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (v1, v2)</span><br><span class="line">        v2 = v2 - m*v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">q, h, f, g, e</span>):</span><br><span class="line">    a = (f*e) % q</span><br><span class="line">    m = (a*inverse(f, g)) % g</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">        </span><br><span class="line">q, h = (<span class="number">7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257</span>, <span class="number">2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800</span>)</span><br><span class="line">e = <span class="number">5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523</span></span><br><span class="line">v = vector([<span class="number">1</span>, h])</span><br><span class="line">u = vector([<span class="number">0</span>, q])</span><br><span class="line">Gauss(v, u)</span><br><span class="line"><span class="comment"># ((47251817614431369468151088301948722761694622606220578981561236563325808178756, 43997957885147078115851147456370880089696256470389782348293341937915504254589),</span></span><br><span class="line"><span class="comment"># (-67269010250212717075432182693043963184097648880165008621907831284647116025901, 99012763459529858809608436133564630524350106000242070336818304053467942269178))</span></span><br><span class="line">f, g = (<span class="number">47251817614431369468151088301948722761694622606220578981561236563325808178756</span>, <span class="number">43997957885147078115851147456370880089696256470389782348293341937915504254589</span>)</span><br><span class="line">m = decrypt(q, h, f, g, e)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;Gauss_lattice_attack!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Blog搭建记录</title>
      <link href="/2024/10/31/Q1uJu-Blog%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2024/10/31/Q1uJu-Blog%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Q1uJu-Blog搭建过程"><a href="#Q1uJu-Blog搭建过程" class="headerlink" title="Q1uJu-Blog搭建过程"></a>Q1uJu-Blog搭建过程</h1><h2 id="Blog地址"><a href="#Blog地址" class="headerlink" title="Blog地址"></a>Blog地址</h2><p>q1uju.cc或<a href="http://www.q1uju.cc/">www.q1uju.cc</a></p><h2 id="博客搭建流程"><a href="#博客搭建流程" class="headerlink" title="博客搭建流程"></a>博客搭建流程</h2><p>搭建过程参照Fomalhaut大佬的b站搭建教程，使用Hexo作为博客框架。</p><p>链接：<a href="https://space.bilibili.com/220757832/channel/collectiondetail?sid=886469&spm_id_from=333.788.0.0">https://space.bilibili.com/220757832/channel/collectiondetail?sid=886469&amp;spm_id_from=333.788.0.0</a></p><p><strong>ps：</strong>搭建过程中忘记截图记录了，有些过程可能没有图片。</p><h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><p>本地已经安装了nodejs、git，直接在GitHub中创建一个新仓库。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030203558852.png" alt="image-20241030203558852"></p><p>用以下git命令生成ssh公钥，用于计算机与Github连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>执行完生成命令后在C盘用户文件夹下的.ssh文件夹看到id_rsa.pub文件，将里面内容复制并粘贴至GitHub里配置SSH KEY。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030204054915.png" alt="image-20241030204054915"></p><p>输入以下命令测试连接，出现连接到账户的信息即为完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在Git BASH输入如下命令安装Hexo。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030204927475.png" alt="image-20241030204927475"></p><p>在目标路径执行下方命令初始化Hexo项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo</span><br></pre></td></tr></table></figure><p>进入hexo，输入<code>npm i</code>安装相关依赖。安装完以来后，输入<code>hexo server</code>或者<code>hexo s</code>启动项目。打开浏览器，输入地址：<a href="http://localhost:4000/%EF%BC%8C%E5%8F%AF%E7%9C%8B%E5%88%B0%E5%88%9D%E5%A7%8B%E6%9E%84%E5%BB%BA%E5%A5%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E3%80%82">http://localhost:4000/，可看到初始构建好的博客。</a></p><h3 id="将静态博客挂载到GitHub-Pages"><a href="#将静态博客挂载到GitHub-Pages" class="headerlink" title="将静态博客挂载到GitHub Pages"></a>将静态博客挂载到GitHub Pages</h3><p>执行如下命令安装hexo-deployer-git。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改_config.yml文件最后一部分。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:Q1uJu/Q1uJu.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>修改好配置后运行如下命令，将代码部署到GitHub。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端</span><br><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br></pre></td></tr></table></figure><p>出现<code>Deploy done</code>说明部署成功。</p><h3 id="Vercel部署与自定义域名"><a href="#Vercel部署与自定义域名" class="headerlink" title="Vercel部署与自定义域名"></a>Vercel部署与自定义域名</h3><p>按流程使用Vercel部署完Hexo项目，在西部数码购买域名q1uju.cc，并绑定Vercel自定义域名。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241101192710963.png" alt="image-20241101192710963"></p><h3 id="博客界面主题及美化"><a href="#博客界面主题及美化" class="headerlink" title="博客界面主题及美化"></a>博客界面主题及美化</h3><p>在博客根目录打开Git BASH，输入下方代码安装butterfly主题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">未安装pug和stylus的渲染器还需再安装这两个渲染器</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>在站点配置文件<code>_config.yml</code>中，把主题改为butterfly。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>剩余美化流程均根据Fomalhaut佬的教程更改，具体美化情况由博客界面直接展示。</p><h2 id="图床搭建流程"><a href="#图床搭建流程" class="headerlink" title="图床搭建流程"></a>图床搭建流程</h2><p>搭建过程参照<a href="https://cloud.tencent.com/developer/article/1766197%EF%BC%8C%E4%BD%BF%E7%94%A8PicGo%E6%8F%92%E4%BB%B6%EF%BC%8CGitee%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A%E3%80%82">https://cloud.tencent.com/developer/article/1766197，使用PicGo插件，Gitee作为图床。</a></p><p>使用原有的Gitee账号登录，并在Gitee中新建一个项目。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202224483.png"></p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202224483.png" alt="image-20241030202224483"></p><p>在设置中生成一个新的私人令牌并保存token。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202302296.png" alt="image-20241030202302296"></p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202315756.png" alt="image-20241030202315756"></p><p>下载安装PicGO。</p><p>PicGo链接：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>我选择的是当前最新的稳定版2.3.1。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202530570.png" alt="image-20241030202530570"></p><p>下载Gitee上传的插件。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202602864.png" alt="image-20241030202602864"></p><p>打开PicGo，找到图床设置中的Gitee并填写相关信息。</p><ul><li>repo：用户名&#x2F;项目（不用带http协议及.git）</li><li>token：新建私人令牌中复制的token</li></ul><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241101192747232.png" alt="image-20241101192747232"></p><p>点击[<strong>设置默认图床</strong>]</p><p>打开Typora，文件-&gt;偏好设置-&gt;图像。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202907568.png" alt="image-20241030202907568"></p><p>设置好后点击[<strong>验证图片上传选项</strong>]，图床搭建及设置完成。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/29/hello-world/"/>
      <url>/2024/10/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>pictures</title>
      <link href="/pictures/index.html"/>
      <url>/pictures/index.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line"></span><br><span class="line">&#123;% galleryGroup &#x27;封面专区&#x27; &#x27;本站用作文章封面的图片，不保证分辨率&#x27; &#x27;/box/Gallery/photo&#x27; https://source.fomal.cc/img/default_cover_61.webp %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% galleryGroup &#x27;背景专区&#x27; &#x27;收藏的一些的背景与壁纸，分辨率很高&#x27; &#x27;/box/Gallery/wallpaper&#x27; https://source.fomal.cc/img/dm11.webp %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
