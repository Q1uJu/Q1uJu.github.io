<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cryptohack - Lattices</title>
      <link href="/2024/11/08/Cryptohack_Lattices/"/>
      <url>/2024/11/08/Cryptohack_Lattices/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Cryptohack-LATTICES"><a href="#Cryptohack-LATTICES" class="headerlink" title="Cryptohack-LATTICES"></a>Cryptohack-LATTICES</h1><h2 id="LATTICES"><a href="#LATTICES" class="headerlink" title="LATTICES"></a>LATTICES</h2><h3 id="1-Vectors"><a href="#1-Vectors" class="headerlink" title="1 Vectors"></a>1 Vectors</h3><p>在某个域$$F$$上的一个向量空间$$V$$是用两个二元运算符定义的集合。</p><p>对于一个向量$$v\in{V}$$，和一个标量$$a\in{F}$$，向量的加法取两个向量并产生另一个向量：对于$$v,w,z\in{V}$$，$$v+w&#x3D;z$$，标量乘法取一个向量和一个标量，并产生一个向量：对于$$v,w\in{V},a\in{F}$$，$$a·v&#x3D;w$$.</p><p>考虑实数域上的二维向量空间，一个向量$$v\in{V}$$被看作是一对数：对于$$a,b\in{R}$$，$$v&#x3D;(a,b)$$。向量加法以$$v+w&#x3D;(a,b)+(c,d)&#x3D;(a+c,b+d)$$的形式运算，标量乘法运算为$$c·v&#x3D;c·(a,b)&#x3D;(c·a,c·b)$$.</p><p>还可以定义内积（也称为点积），它取两个向量并返回一个标量。从形式上讲，我们认为：对于$$v,w\in{V},a\in{F}$$，$$v·w&#x3D;a$$。在我们的二维例子中，内积运算为：$$v·w&#x3D;(a,b)·(c,d)&#x3D;a·c+b·d$$.</p><p>题目：</p><p>给出以下三个向量<code>v = (2,6,3)</code>，<code>w = (1,0,0)</code>，<code>u = (7,7,2)</code>，计算<code>3*(2*v - w) · 2*u</code>。</p><p>考察：基本的向量与标量之间的运算</p><p>直接计算或使用SageMath计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v = vector([2,6,3])</span><br><span class="line">w = vector([1,0,0])</span><br><span class="line">u = vector([7,7,2])</span><br><span class="line">3*(2*v - w)*2*u</span><br><span class="line"># 702</span><br></pre></td></tr></table></figure><h3 id="2-Size-and-Basis"><a href="#2-Size-and-Basis" class="headerlink" title="2 Size and Basis"></a>2 Size and Basis</h3><p>一组向量$$v_1,v_2…v_k\in{V}$$是线性无关的，当且仅当<br>$$<br>a_1v_1+a_2v_2+…+a_kv_k&#x3D;0<br>$$<br>仅在$$a_1&#x3D;a_2&#x3D;…&#x3D;a_k&#x3D;0$$时成立</p><p>基是一组线性独立的向量$$v_1,v_2,…,v_n\in{V}$$使得任何向量$$w\in{V}$$可以写成：<br>$$<br>w&#x3D;a_1·v_1+a_2·v_2+…+a_k·v_n<br>$$</p><p><code>基中的元素数量</code>是<code>向量空间的维数</code></p><p>向量的大小，定义为<code>||v||</code>，向量自己和自己做内积：$$||v||^2&#x3D;v·v$$</p><p>一组<code>正交基(orthogonal)</code>是指一组向量基$$v_1,v_2,…,v_n\in{V}$$，其两两不同的向量之间内积为0：$$v_i·v_j&#x3D;0,i\neq{j}$$.</p><p>一组<code>标准正交基(orthonormal)</code>是指一组正交基，对于所有$$i$$，其大小$$||v_i||&#x3D;1$$.</p><p>题目：</p><p>给出一个向量<code>v=(4,6,2,5)</code>，计算它的大小。</p><p>考察：求向量的大小或者说向量的模</p><p>直接计算或使用SageMath计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v = vector([4,6,2,5])</span><br><span class="line">norm(v)</span><br><span class="line"># 9</span><br></pre></td></tr></table></figure><h3 id="3-Gram-Schmidt"><a href="#3-Gram-Schmidt" class="headerlink" title="3 Gram Schmidt"></a>3 Gram Schmidt</h3><p>给出一组向量空间的基$$v_1,v_2,…,v_n\in{V}$$，格拉姆-施密特算法可以计算这个向量空间的一组正交基$$u_1,u_2,…,u_n\in{V}$$.</p><p>在Jeffrey Hoffstein、Jill Pipher、Joseph H.Silverman所著的《数学密码学导论》中，格拉姆-施密特算法如下：</p><blockquote><p>格拉姆-施密特算法</p><p>$$u_1&#x3D;v_1$$</p><p>Loop $$i$$ &#x3D; 2,3…,n</p><p>​    Compute $$\mu_{ij}&#x3D;v_i·u_j&#x2F;||u_j||^2,1\leq{j}&lt;i$$.</p><p>​    Set $$u_i&#x3D;v_i-\mu_{ij}·u_j$$(Sum over $$j$$ for $$1\leq{j}&lt;i$$)</p><p>End Loop</p></blockquote><p>题目：</p><p>给出以下一组基向量：<br>$$<br>v_1&#x3D;(4,1,3,-1),v_2&#x3D;(2,1,-3,4),v_3&#x3D;(1,0,-2,7),v_4&#x3D;(6,2,9,-5)<br>$$<br>使用格拉姆-施密特算法计算正交基。flag是$$u_4$$的第二个成员的浮点数值，保留小数点后五位。</p><p>考察：格拉姆-施密特算法计算正交基</p><p>使用SageMath计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v0 = vector([4,1,3,-1])</span><br><span class="line">v1 = vector([2,1,-3,4])</span><br><span class="line">v2 = vector([1,0,-2,7])</span><br><span class="line">v3 = vector([6,2,9,-5])</span><br><span class="line">M = Matrix([v0,v1,v2,v3])</span><br><span class="line">M_GS = M.gram_schmidt()</span><br><span class="line">round(M_GS[0][3][1],5)</span><br><span class="line"># 0.91611</span><br></pre></td></tr></table></figure><p>贴一个Python的Solution：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">v = [</span><br><span class="line">    np.array([<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,-<span class="number">1</span>]),</span><br><span class="line">    np.array([<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>]),</span><br><span class="line">    np.array([<span class="number">1</span>,<span class="number">0</span>,-<span class="number">2</span>,<span class="number">7</span>]),</span><br><span class="line">    np.array([<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span>,-<span class="number">5</span>])</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">u1 = v1</span></span><br><span class="line"><span class="string">Loop i = 2,3...,n</span></span><br><span class="line"><span class="string">   Compute μij = vi ∙ uj / ||uj||2, 1 ≤ j &lt; i.</span></span><br><span class="line"><span class="string">   Set ui = vi - μij * uj (Sum over j for 1 ≤ j &lt; i)</span></span><br><span class="line"><span class="string">End Loop</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">u = [v[<span class="number">0</span>]]</span><br><span class="line"><span class="keyword">for</span> vi <span class="keyword">in</span> v[<span class="number">1</span>:]:</span><br><span class="line">    mi = [np.dot(vi, uj) / np.dot(uj,uj) <span class="keyword">for</span> uj <span class="keyword">in</span> u]</span><br><span class="line">    u += [vi - <span class="built_in">sum</span>([mij * uj <span class="keyword">for</span> (mij, uj) <span class="keyword">in</span> <span class="built_in">zip</span>(mi,u)])]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(u[<span class="number">3</span>][<span class="number">1</span>], <span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="4-What’s-a-Lattice"><a href="#4-What’s-a-Lattice" class="headerlink" title="4 What’s a Lattice?"></a>4 What’s a Lattice?</h3><p>给出一组线性无关的向量$$v_1,v_2,…,v_n\in{R^m}$$，由$$v_1,v_2,…,v_n$$生成的格子$$L$$是由$$v_1,v_2,…,v_n$$和对应整系数的组合。<br>$$<br>L&#x3D;a_1·v_1+a_2·v_2+…+a_k·v_k:a_1,a_2,…,a_n\in{\mathbb{Z}}<br>$$<br>格$$L$$的基，可以是任意一组生成L的线性无关的向量。基的选择不唯一。在下图中，展示了一个由两组不同的基向量$$u_1,u_2$$和$$v_1,v_2$$生成的二维格。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241104210111547.png" alt="image-20241104210111547"></p><p>使用基向量，我们可以用基向量的整数倍乘来到达格内的任意一点。基向量还定义了基本域：<br>$$<br>F(v_1,…,v_n)&#x3D;t_1<em>v_1+t_2</em>v_2+…+t_n*v_n:0\leq{t_i}&lt;1.<br>$$<br>举一个二维的例子，基本域是由边$$u_1$$和$$u_2$$构成的平行四边形。</p><p>我们可以通过基向量计算基本域的体积。例如，取一个以$$v&#x3D;(2,5),u&#x3D;(3,1)$$为基向量的二维格。创建一个矩阵$$A$$，其行对应于基向量：$$A&#x3D;[[2,5],[3,1]]$$。这个基本域的体积为矩阵$$A$$行列式的大小：$$vol(F)&#x3D;|det(A)|&#x3D;|2·1-5·3|&#x3D;|-13|&#x3D;13$$.</p><p>题目：</p><p>计算由基向量$$v_1&#x3D;(6,2,-3),v_2&#x3D;(5,1,4),v_3&#x3D;(2,7,1)$$构成的基本域的体积。</p><p>考察：基向量构成的基本域的体积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v = vector</span><br><span class="line">v1 = v([6,2,-3])</span><br><span class="line">v2 = v([5,1,4])</span><br><span class="line">v3 = v([2,7,1])</span><br><span class="line">A = matrix([v1,v2,v3])</span><br><span class="line">det(A)</span><br></pre></td></tr></table></figure><h3 id="5-Gaussian-Reduction"><a href="#5-Gaussian-Reduction" class="headerlink" title="5 Gaussian Reduction"></a>5 Gaussian Reduction</h3><p>如果你仔细观察，格密码开始在密码学中无处不在。有时，它们通过操纵加密系统出现，破坏了不够安全地生成的参数。最著名的例子是Coppersmith对RSA密码学的攻击。</p><p>格密码也可用于构建加密协议，其安全性基于两个基本的困难问题：</p><p><strong>最短向量问题（SVP）</strong>：在格L中找到最短的非零向量。换句话说，在$$v\in{L}$$内找到非零向量，使$$||v||$$取最小值。</p><p><strong>最近向量问题（CVP）</strong>：给定一个不在L中的向量$$w\in{R_m}$$，找到与$$w$$最接近的向量$$v\in{L}$$，即找到向量$$v\in{L}$$，使$$||v-w||$$取最小值。</p><p>对于一般格来说，SVP很难，但对于足够简单的情况，有有效的算法来计算SVP的解或近似值。当格的维数为4或更小时，我们可以在多项式时间内精确计算；对于更高的维度，我们不得不接受一个近似值。</p><p>高斯开发了他的算法，为给定任意基的二维格找到最优基。此外，该算法的输出$$v_1$$是$$L$$中最短的非零向量，因此求解了SVP。</p><blockquote><p>ps:对于更高维度，有一种称为LLL算法的格基约减算法，以Lenstra、Lenstra和Lovász的名字命名。如果你经常玩CTF，你就一定会知道。LLL算法在多项式时间内运行。不过，就目前而言，让我们停留在二维空间。</p></blockquote><p>高斯的算法大致通过从另一个基向量中减去一个基向量的倍数来工作，直到不再可能使它们更小。由于这是在二维中工作的，因此很容易可视化。以下是Jeffrey Hoffstein、Jill Pipher和Joseph H.Silverman在《数学密码学导论》中对算法的描述：</p><blockquote><p>高斯格约化算法</p><p>Loop</p><p>​    (a) If $$||v_2||&lt; ||v_1||$$, swap $$v_1,v_2$$</p><p>​    (b) Compute $$m&#x3D;[v_1·v_2&#x2F;v_1·v_1]$$</p><p>​    (c) If $$m&#x3D;0$$, return $$v_1,v_2$$</p><p>​    (d) $$v_2&#x3D;v_2-m·v_1$$</p><p>Continue Loop</p></blockquote><p>请注意，与欧几里德的GCD算法在“交换”和“缩减”步骤上的相似性，我们必须对浮点数进行四舍五入，因为在格上，我们可能只使用整数作为基向量的系数。</p><p>题目：</p><p>取两个向量$$v&#x3D;(846835985,9834798552),u&#x3D;(87502093,123094980)$$，通过高斯算法，找到最优基，flag为新的基向量的内积。</p><p>考察：高斯格约化算法求最优基</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v = vector([846835985, 9834798552])</span><br><span class="line">u = vector([87502093, 123094980])</span><br><span class="line">v1,v2 = u,v</span><br><span class="line">m = 1</span><br><span class="line">while m != 0:</span><br><span class="line">    if norm(v2) &lt; norm(v1):</span><br><span class="line">        print(&#x27;swap&#x27;)</span><br><span class="line">        v1,v2 = v2,v1</span><br><span class="line">    m = int((v1*v2)/(v1*v1))</span><br><span class="line">    v2 = v2 - m*v1</span><br><span class="line">print(v1, v2)</span><br><span class="line">print(v1*v2)</span><br></pre></td></tr></table></figure><h3 id="6-Find-the-Lattice"><a href="#6-Find-the-Lattice" class="headerlink" title="6 Find the Lattice"></a>6 Find the Lattice</h3><p>正如我们所看到的，格包含一些难题，这些难题可以形成密码系统的陷门函数。我们还发现，在密码分析中，格可以破坏最初似乎与格无关的密码协议。</p><p>这个挑战使用模块化算法来加密标志，但协议中隐藏着一个二维格。我们强烈建议花时间应对这一挑战，并找到如何用格子打破它。这是一个著名的例子，有很多可用的资源，但知道如何在系统中发现格通常是打破它的关键。</p><p>作为提示，您将能够使用前一个挑战的高斯缩减来完成这个挑战。</p><p>题目代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, inverse, bytes_to_long</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b&#x27;crypto&#123;?????????????????????&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    upper_bound = <span class="built_in">int</span>(math.sqrt(q // <span class="number">2</span>))</span><br><span class="line">    lower_bound = <span class="built_in">int</span>(math.sqrt(q // <span class="number">4</span>))</span><br><span class="line">    f = random.randint(<span class="number">2</span>, upper_bound)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = random.randint(lower_bound, upper_bound)</span><br><span class="line">        <span class="keyword">if</span> math.gcd(f, g) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = (inverse(f, q)*g) % q</span><br><span class="line">    <span class="keyword">return</span> (q, h), (f, g)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">q, h, m</span>):</span><br><span class="line">    <span class="keyword">assert</span> m &lt; <span class="built_in">int</span>(math.sqrt(q // <span class="number">2</span>))</span><br><span class="line">    r = random.randint(<span class="number">2</span>, <span class="built_in">int</span>(math.sqrt(q // <span class="number">2</span>)))</span><br><span class="line">    e = (r*h + m) % q</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">q, h, f, g, e</span>):</span><br><span class="line">    a = (f*e) % q</span><br><span class="line">    m = (a*inverse(f, g)) % g</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public, private = gen_key()</span><br><span class="line">q, h = public</span><br><span class="line">f, g = private</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(FLAG)</span><br><span class="line">e = encrypt(q, h, m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Public key: <span class="subst">&#123;(q,h)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Encrypted Flag: <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>题目输出：</p><blockquote><p>Public key: (7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257, 2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800)<br>Encrypted Flag: 5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523</p></blockquote><p>已知q, h, e，其中<br>$$<br>h\equiv{f^{-1}<em>g}\mod{q}\<br>e\equiv{(r</em>h+m})\mod{q}<br>$$</p><blockquote><p>q 512位</p><p>f,g 低于256位</p><p>h,e 512位</p><p>r 256位</p><p>m为flag，大小约为231bit</p></blockquote><p>要求得m，需要获得<code>decrypt</code>的参数，还剩$$f$$和$$g$$是未知的，由(6)式中可知<br>$$<br>f·h\equiv g\mod q<br>$$<br>用上一题格的思想，构造一个由下面这个矩阵$$M$$的两个行向量$$(1,h),(0,q)$$所张成的Lattice：<br>$$<br>M &#x3D; \begin{bmatrix}<br>    1 &amp; h \<br>    0 &amp; q<br>\end{bmatrix} \tag{1}<br>$$<br>向量$$(f,g)$$在这个格上，即存在系数$$a,b$$使$$a(1,h)+b(0,q)&#x3D;(f,g)$$<br>$$<br>f·h \equiv g \mod q\<br>f·h &#x3D; g + u·q\<br>f·h - u·q &#x3D; g<br>$$<br>即$$a,b&#x3D;f,-u$$满足条件</p><p>向量$$(f,g)$$可以由两组基向量$$M$$的某种整系数线性组合$$(f,-u)$$来表示，因此向量$$(f,g)$$就在这个Lattice上。</p><p>对于两个基底向量，(1,h):512位,(0,q):512位</p><p>而向量$$(f,g)$$的长度约为256位，相比于基底向量极小，很大概率为此Lattice的最短向量。</p><p>EXP(SageMath):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gauss Lattice Reduction</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Gauss</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> norm(v2) &lt; norm(v1):</span><br><span class="line">            v1, v2 = v2, v1</span><br><span class="line">        m = <span class="built_in">round</span>( v1*v2 / norm(v1)^<span class="number">2</span> )</span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (v1, v2)</span><br><span class="line">        v2 = v2 - m*v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">q, h, f, g, e</span>):</span><br><span class="line">    a = (f*e) % q</span><br><span class="line">    m = (a*inverse(f, g)) % g</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">        </span><br><span class="line">q, h = (<span class="number">7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257</span>, <span class="number">2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800</span>)</span><br><span class="line">e = <span class="number">5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523</span></span><br><span class="line">v = vector([<span class="number">1</span>, h])</span><br><span class="line">u = vector([<span class="number">0</span>, q])</span><br><span class="line">Gauss(v, u)</span><br><span class="line"><span class="comment"># ((47251817614431369468151088301948722761694622606220578981561236563325808178756, 43997957885147078115851147456370880089696256470389782348293341937915504254589),</span></span><br><span class="line"><span class="comment"># (-67269010250212717075432182693043963184097648880165008621907831284647116025901, 99012763459529858809608436133564630524350106000242070336818304053467942269178))</span></span><br><span class="line">f, g = (<span class="number">47251817614431369468151088301948722761694622606220578981561236563325808178756</span>, <span class="number">43997957885147078115851147456370880089696256470389782348293341937915504254589</span>)</span><br><span class="line">m = decrypt(q, h, f, g, e)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;crypto&#123;Gauss_lattice_attack!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Blog搭建记录</title>
      <link href="/2024/10/31/Q1uJu-Blog%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2024/10/31/Q1uJu-Blog%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Q1uJu-Blog搭建过程"><a href="#Q1uJu-Blog搭建过程" class="headerlink" title="Q1uJu-Blog搭建过程"></a>Q1uJu-Blog搭建过程</h1><h2 id="Blog地址"><a href="#Blog地址" class="headerlink" title="Blog地址"></a>Blog地址</h2><p>q1uju.cc或<a href="http://www.q1uju.cc/">www.q1uju.cc</a></p><h2 id="博客搭建流程"><a href="#博客搭建流程" class="headerlink" title="博客搭建流程"></a>博客搭建流程</h2><p>搭建过程参照Fomalhaut大佬的b站搭建教程，使用Hexo作为博客框架。</p><p>链接：<a href="https://space.bilibili.com/220757832/channel/collectiondetail?sid=886469&spm_id_from=333.788.0.0">https://space.bilibili.com/220757832/channel/collectiondetail?sid=886469&amp;spm_id_from=333.788.0.0</a></p><p><strong>ps：</strong>搭建过程中忘记截图记录了，有些过程可能没有图片。</p><h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><p>本地已经安装了nodejs、git，直接在GitHub中创建一个新仓库。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030203558852.png" alt="image-20241030203558852"></p><p>用以下git命令生成ssh公钥，用于计算机与Github连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>执行完生成命令后在C盘用户文件夹下的.ssh文件夹看到id_rsa.pub文件，将里面内容复制并粘贴至GitHub里配置SSH KEY。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030204054915.png" alt="image-20241030204054915"></p><p>输入以下命令测试连接，出现连接到账户的信息即为完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在Git BASH输入如下命令安装Hexo。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030204927475.png" alt="image-20241030204927475"></p><p>在目标路径执行下方命令初始化Hexo项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo</span><br></pre></td></tr></table></figure><p>进入hexo，输入<code>npm i</code>安装相关依赖。安装完以来后，输入<code>hexo server</code>或者<code>hexo s</code>启动项目。打开浏览器，输入地址：<a href="http://localhost:4000/%EF%BC%8C%E5%8F%AF%E7%9C%8B%E5%88%B0%E5%88%9D%E5%A7%8B%E6%9E%84%E5%BB%BA%E5%A5%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E3%80%82">http://localhost:4000/，可看到初始构建好的博客。</a></p><h3 id="将静态博客挂载到GitHub-Pages"><a href="#将静态博客挂载到GitHub-Pages" class="headerlink" title="将静态博客挂载到GitHub Pages"></a>将静态博客挂载到GitHub Pages</h3><p>执行如下命令安装hexo-deployer-git。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改_config.yml文件最后一部分。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:Q1uJu/Q1uJu.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>修改好配置后运行如下命令，将代码部署到GitHub。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端</span><br><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br></pre></td></tr></table></figure><p>出现<code>Deploy done</code>说明部署成功。</p><h3 id="Vercel部署与自定义域名"><a href="#Vercel部署与自定义域名" class="headerlink" title="Vercel部署与自定义域名"></a>Vercel部署与自定义域名</h3><p>按流程使用Vercel部署完Hexo项目，在西部数码购买域名q1uju.cc，并绑定Vercel自定义域名。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241101192710963.png" alt="image-20241101192710963"></p><h3 id="博客界面主题及美化"><a href="#博客界面主题及美化" class="headerlink" title="博客界面主题及美化"></a>博客界面主题及美化</h3><p>在博客根目录打开Git BASH，输入下方代码安装butterfly主题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">未安装pug和stylus的渲染器还需再安装这两个渲染器</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>在站点配置文件<code>_config.yml</code>中，把主题改为butterfly。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>剩余美化流程均根据Fomalhaut佬的教程更改，具体美化情况由博客界面直接展示。</p><h2 id="图床搭建流程"><a href="#图床搭建流程" class="headerlink" title="图床搭建流程"></a>图床搭建流程</h2><p>搭建过程参照<a href="https://cloud.tencent.com/developer/article/1766197%EF%BC%8C%E4%BD%BF%E7%94%A8PicGo%E6%8F%92%E4%BB%B6%EF%BC%8CGitee%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A%E3%80%82">https://cloud.tencent.com/developer/article/1766197，使用PicGo插件，Gitee作为图床。</a></p><p>使用原有的Gitee账号登录，并在Gitee中新建一个项目。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202224483.png"></p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202224483.png" alt="image-20241030202224483"></p><p>在设置中生成一个新的私人令牌并保存token。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202302296.png" alt="image-20241030202302296"></p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202315756.png" alt="image-20241030202315756"></p><p>下载安装PicGO。</p><p>PicGo链接：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>我选择的是当前最新的稳定版2.3.1。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202530570.png" alt="image-20241030202530570"></p><p>下载Gitee上传的插件。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202602864.png" alt="image-20241030202602864"></p><p>打开PicGo，找到图床设置中的Gitee并填写相关信息。</p><ul><li>repo：用户名&#x2F;项目（不用带http协议及.git）</li><li>token：新建私人令牌中复制的token</li></ul><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241101192747232.png" alt="image-20241101192747232"></p><p>点击[<strong>设置默认图床</strong>]</p><p>打开Typora，文件-&gt;偏好设置-&gt;图像。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202907568.png" alt="image-20241030202907568"></p><p>设置好后点击[<strong>验证图片上传选项</strong>]，图床搭建及设置完成。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/29/hello-world/"/>
      <url>/2024/10/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>pictures</title>
      <link href="/pictures/index.html"/>
      <url>/pictures/index.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line"></span><br><span class="line">&#123;% galleryGroup &#x27;封面专区&#x27; &#x27;本站用作文章封面的图片，不保证分辨率&#x27; &#x27;/box/Gallery/photo&#x27; https://source.fomal.cc/img/default_cover_61.webp %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% galleryGroup &#x27;背景专区&#x27; &#x27;收藏的一些的背景与壁纸，分辨率很高&#x27; &#x27;/box/Gallery/wallpaper&#x27; https://source.fomal.cc/img/dm11.webp %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
