<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Blog搭建记录</title>
      <link href="/2024/10/31/Q1uJu-Blog%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2024/10/31/Q1uJu-Blog%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Q1uJu-Blog搭建过程"><a href="#Q1uJu-Blog搭建过程" class="headerlink" title="Q1uJu-Blog搭建过程"></a>Q1uJu-Blog搭建过程</h1><h2 id="Blog地址"><a href="#Blog地址" class="headerlink" title="Blog地址"></a>Blog地址</h2><p>q1uju.cc或<a href="http://www.q1uju.cc/">www.q1uju.cc</a></p><h2 id="博客搭建流程"><a href="#博客搭建流程" class="headerlink" title="博客搭建流程"></a>博客搭建流程</h2><p>搭建过程参照Fomalhaut大佬的b站搭建教程，使用Hexo作为博客框架。</p><p>链接：<a href="https://space.bilibili.com/220757832/channel/collectiondetail?sid=886469&spm_id_from=333.788.0.0">https://space.bilibili.com/220757832/channel/collectiondetail?sid=886469&amp;spm_id_from=333.788.0.0</a></p><p><strong>ps：</strong>搭建过程中忘记截图记录了，有些过程可能没有图片。</p><h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><p>本地已经安装了nodejs、git，直接在GitHub中创建一个新仓库。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030203558852.png" alt="image-20241030203558852"></p><p>用以下git命令生成ssh公钥，用于计算机与Github连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>执行完生成命令后在C盘用户文件夹下的.ssh文件夹看到id_rsa.pub文件，将里面内容复制并粘贴至GitHub里配置SSH KEY。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030204054915.png" alt="image-20241030204054915"></p><p>输入以下命令测试连接，出现连接到账户的信息即为完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在Git BASH输入如下命令安装Hexo。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030204927475.png" alt="image-20241030204927475"></p><p>在目标路径执行下方命令初始化Hexo项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo</span><br></pre></td></tr></table></figure><p>进入hexo，输入<code>npm i</code>安装相关依赖。安装完以来后，输入<code>hexo server</code>或者<code>hexo s</code>启动项目。打开浏览器，输入地址：<a href="http://localhost:4000/%EF%BC%8C%E5%8F%AF%E7%9C%8B%E5%88%B0%E5%88%9D%E5%A7%8B%E6%9E%84%E5%BB%BA%E5%A5%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E3%80%82">http://localhost:4000/，可看到初始构建好的博客。</a></p><h3 id="将静态博客挂载到GitHub-Pages"><a href="#将静态博客挂载到GitHub-Pages" class="headerlink" title="将静态博客挂载到GitHub Pages"></a>将静态博客挂载到GitHub Pages</h3><p>执行如下命令安装hexo-deployer-git。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改_config.yml文件最后一部分。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:Q1uJu/Q1uJu.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>修改好配置后运行如下命令，将代码部署到GitHub。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端</span><br><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br></pre></td></tr></table></figure><p>出现<code>Deploy done</code>说明部署成功。</p><h3 id="Vercel部署与自定义域名"><a href="#Vercel部署与自定义域名" class="headerlink" title="Vercel部署与自定义域名"></a>Vercel部署与自定义域名</h3><p>按流程使用Vercel部署完Hexo项目，在西部数码购买域名q1uju.cc，并绑定Vercel自定义域名。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241101192710963.png" alt="image-20241101192710963"></p><h3 id="博客界面主题及美化"><a href="#博客界面主题及美化" class="headerlink" title="博客界面主题及美化"></a>博客界面主题及美化</h3><p>在博客根目录打开Git BASH，输入下方代码安装butterfly主题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">未安装pug和stylus的渲染器还需再安装这两个渲染器</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>在站点配置文件<code>_config.yml</code>中，把主题改为butterfly。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>剩余美化流程均根据Fomalhaut佬的教程更改，具体美化情况由博客界面直接展示。</p><h2 id="图床搭建流程"><a href="#图床搭建流程" class="headerlink" title="图床搭建流程"></a>图床搭建流程</h2><p>搭建过程参照<a href="https://cloud.tencent.com/developer/article/1766197%EF%BC%8C%E4%BD%BF%E7%94%A8PicGo%E6%8F%92%E4%BB%B6%EF%BC%8CGitee%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A%E3%80%82">https://cloud.tencent.com/developer/article/1766197，使用PicGo插件，Gitee作为图床。</a></p><p>使用原有的Gitee账号登录，并在Gitee中新建一个项目。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202224483.png"></p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202224483.png" alt="image-20241030202224483"></p><p>在设置中生成一个新的私人令牌并保存token。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202302296.png" alt="image-20241030202302296"></p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202315756.png" alt="image-20241030202315756"></p><p>下载安装PicGO。</p><p>PicGo链接：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>我选择的是当前最新的稳定版2.3.1。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202530570.png" alt="image-20241030202530570"></p><p>下载Gitee上传的插件。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202602864.png" alt="image-20241030202602864"></p><p>打开PicGo，找到图床设置中的Gitee并填写相关信息。</p><ul><li>repo：用户名&#x2F;项目（不用带http协议及.git）</li><li>token：新建私人令牌中复制的token</li></ul><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241101192747232.png" alt="image-20241101192747232"></p><p>点击[<strong>设置默认图床</strong>]</p><p>打开Typora，文件-&gt;偏好设置-&gt;图像。</p><p><img src="https://gitee.com/Q1uJu/picture_bed/raw/master/image-20241030202907568.png" alt="image-20241030202907568"></p><p>设置好后点击[<strong>验证图片上传选项</strong>]，图床搭建及设置完成。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CRYPTO - WriteUp</title>
      <link href="/2024/10/29/CRYPTO-WriteUp/"/>
      <url>/2024/10/29/CRYPTO-WriteUp/</url>
      
        <content type="html"><![CDATA[<h1 id="CRYPTO-WriteUp"><a href="#CRYPTO-WriteUp" class="headerlink" title="CRYPTO - WriteUp"></a>CRYPTO - WriteUp</h1><p>[toc]</p><h2 id="密码学签到"><a href="#密码学签到" class="headerlink" title="密码学签到"></a>密码学签到</h2><p><img src="/CRYPTO-WriteUp.assets/image-20220719171338672.png" alt="image-20220719171338672"></p><p>很简单的将整个字符串<strong>逆转</strong>一下即可获得flag。</p><p><strong>flag{ctf.show}</strong></p><h2 id="crypto2"><a href="#crypto2" class="headerlink" title="crypto2"></a>crypto2</h2><p>文件内仅有(、)、+、[、]、!六种符号编写了代码，可知是<strong>Jsfuck</strong>。</p><p><img src="/CRYPTO-WriteUp.assets/image-20220719172543210.png" alt="image-20220719172543210"></p><p>在控制台将密码输入Console内回车即可获得flag。</p><p><strong>flag{3e858ccd79287cfe8509f15a71b4c45d}</strong></p><p>P.S. <a href="Jsfuck.md">Jsfuck的简单介绍</a>。</p><h2 id="crypto3"><a href="#crypto3" class="headerlink" title="crypto3"></a>crypto3</h2><p>打开看到网站乱码，通过charset设置编码格式为UTF-8。</p><p><img src="/CRYPTO-WriteUp.assets/image-20220720152718371.png" alt="image-20220720152718371"></p><p>可以看到很多的颜文字，猜测是<strong>AAEncode</strong>，将加密的字段扔到控制台中执行，获得flag。</p><p><img src="/CRYPTO-WriteUp.assets/image-20220720152635205.png" alt="image-20220720152635205"></p><p><strong>flag{js_da_fa_hao}</strong></p><p>P.S. 偏娱乐性质的加密解密AAEncode，不予介绍了就，随便挂个加密网站链接-&gt;<a href="https://utf-8.jp/public/aaencode.html">AAEncode</a>，解密的话建议直接控制台。</p><h2 id="crypto4"><a href="#crypto4" class="headerlink" title="crypto4"></a>crypto4</h2><p>简单的<strong>RSA</strong>，已知p，q，e，求d值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">447685307</span></span><br><span class="line">q = <span class="number">2037</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 53616899001 </span></span><br></pre></td></tr></table></figure><p><strong>flag{53616899001}</strong></p><h2 id="crypto5"><a href="#crypto5" class="headerlink" title="crypto5"></a>crypto5</h2><p>还是基础简单的<strong>RSA</strong>，已知p，q，e，c，求m值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">447685307</span></span><br><span class="line">q = <span class="number">2037</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">c = <span class="number">704796792</span></span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, p*q)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 904332399012</span></span><br></pre></td></tr></table></figure><p><strong>flag{904332399012}</strong></p><h2 id="crypto6"><a href="#crypto6" class="headerlink" title="crypto6"></a>crypto6</h2><p>打开后发现密文开头为U2FsdGVkX1开头，且仅由26个大小写英文字母、&#x3D;、+、&#x2F;组成，所以猜测是<strong>Rabbit加密</strong>。</p><p>通过<a href="http://www.jsons.cn/rabbitencrypt/">解密网站</a>解码获得flag。</p><p><img src="/CRYPTO-WriteUp.assets/image-20220720172841439.png" alt="image-20220720172841439"></p><p><strong>flag{a8db1d82db78ed452ba0882fb9554fc9}</strong></p><p>P.S. <a href="Rabbit.md">Rabbit的简单介绍</a></p><h2 id="crypto7"><a href="#crypto7" class="headerlink" title="crypto7"></a>crypto7</h2><p>打开文件后看到Ook即知道为<strong>Ook密码</strong>，通过<a href="https://www.splitbrain.org/services/ook">解密网址</a>解密获得flag。</p><p><strong>flag{b615c4b79a1aede83b9ae67104ff4eb5}</strong></p><h2 id="crypto8"><a href="#crypto8" class="headerlink" title="crypto8"></a>crypto8</h2><p>打开文件后看到仅有+-[]&lt;&gt;.七种符号，且五五一组，可猜测为<strong>Brainfuck编码</strong>，通过<a href="https://www.splitbrain.org/services/ook">解密网址</a>解密获得flag。</p><p><strong>flag{99754106633f94d350db34d548d6091a}</strong></p><p>P.S. <a href="Brainfuck.md">Brainfuck的简单介绍</a></p><h2 id="crypto9"><a href="#crypto9" class="headerlink" title="crypto9"></a>crypto9</h2><h2 id="crypto10"><a href="#crypto10" class="headerlink" title="crypto10"></a>crypto10</h2><p>一个等号”&#x3D;”后跟随两个十六进制数字(0-9或A-F)，很明显的<strong>Quoted-Printable编码</strong>，通过<a href="http://www.hiencode.com/quoted.html">解密网站</a>解密获得flag。</p><p><strong>flag{用你那火热的嘴唇让我在午夜里无尽的销魂}</strong></p><p>P.S. <a href="Quoted-Printable.md">Quoted-Printable的简单介绍</a></p><h2 id="crypto11"><a href="#crypto11" class="headerlink" title="crypto11"></a>crypto11</h2><p><code>密文：a8db1d82db78ed452ba0882fb9554fc</code></p><p>31位，猜测是<strong>MD5加密</strong>，直接通过<a href="https://www.cmd5.com/">MD5解密网站</a>解密获得flag。</p><p><strong>flag{ctf}</strong></p><h2 id="crypto0"><a href="#crypto0" class="headerlink" title="crypto0"></a>crypto0</h2><p><code>密文：gmbh&#123;ifmmp_dug&#125;</code></p><p>{}的位置很板正，前面四位gmbh，猜测对应flag，移位密码，考虑<strong>凯撒密码</strong>，位移25位获得flag。</p><p><strong>flag{hello_ctf}</strong></p><h2 id="crypto12"><a href="#crypto12" class="headerlink" title="crypto12"></a>crypto12</h2><p><code>密文：uozt&#123;Zgyzhv_xlwv_uiln_xguhsld&#125;</code></p><p>同样是个很板正的{}，猜测是替换密码，uozt对应flag，u-f，o-l，a-z，t-g，a-z可以联想到<strong>埃特巴什码（Atbash Cipher）</strong>，解密获得flag。</p><p><strong>flag{Atbase_code_from_ctfshow}</strong></p><h2 id="crypto13"><a href="#crypto13" class="headerlink" title="crypto13"></a>crypto13</h2><p>文件解压得到一个名为base家族的文件夹&#x3D;&gt;猜测是<strong>base家族</strong>的解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = base64.b32decode(s)</span><br><span class="line">        base(s)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s = base64.b64decode(s)</span><br><span class="line">            base(s)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;base.txt&#x27;</span>)</span><br><span class="line">text = f.read()</span><br><span class="line"><span class="built_in">print</span>(base(text))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;b4Se_Fami1y_Is_FUn&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag{b4Se_Fami1y_Is_FUn}</strong></p><h2 id="crypto14"><a href="#crypto14" class="headerlink" title="crypto14"></a>crypto14</h2><p><code>密文：code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s = <span class="string">&quot;密文内容&quot;</span></span><br><span class="line">l = s.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">bin_txt = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    bin_txt = bin_txt + i    <span class="comment"># bin_txt存储了二进制字符串</span></span><br><span class="line">hex_txt = <span class="built_in">hex</span>(<span class="built_in">int</span>(bin_txt, <span class="number">2</span>))  <span class="comment"># 转化为十六进制字符串存于hex_txt中，注意hex_txt开头为&#x27;0x&#x27;</span></span><br><span class="line">b_str = binascii.unhexlify(hex_txt[<span class="number">2</span>:]).decode()  <span class="comment"># 从十六进制字符串返回二进制数据并解码为字符串数据</span></span><br><span class="line">b_str = b_str.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">rs = <span class="string">&quot;&quot;</span> <span class="comment"># rs存储去掉空格后的字符串</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b_str:</span><br><span class="line">    rs = rs + i</span><br><span class="line">rs = binascii.unhexlify(rs).decode() <span class="comment"># 再一次从十六进制字符串中返回二进制数据并解码为字符串数据</span></span><br><span class="line"><span class="comment"># rs = 3EP/3VNFFmNEAnlHD5dCMmVHD5ad9uG</span></span><br><span class="line"></span><br><span class="line">base = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">temp = rs[:-<span class="number">1</span>]  <span class="comment"># 不知道为啥结果里有个回车</span></span><br><span class="line">rs = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> temp:</span><br><span class="line">    rs += base[(base.index(i)-<span class="number">30</span>)%<span class="number">64</span>]</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">len</span>(rs)%<span class="number">4</span> != <span class="number">0</span>):</span><br><span class="line">    rs = rs + <span class="string">&quot;=&quot;</span>*(<span class="number">4</span>-<span class="built_in">len</span>(rs)%<span class="number">4</span>) <span class="comment"># 填充缺少的=号</span></span><br><span class="line"><span class="comment"># rs = ZmxhZ3vnnIvmiJHplb/kuI3plb8/fQo=</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(rs).decode())</span><br></pre></td></tr></table></figure><p><strong>flag{看我长不长?}</strong></p><h2 id="萌新-密码5"><a href="#萌新-密码5" class="headerlink" title="萌新_密码5"></a>萌新_密码5</h2><p><code>密文：由田中 由田井 羊夫 由田人 由中人 羊羊 由由王 由田中 由由大 由田工 由由由 由由羊 由中大</code></p><p>很容易可以得知为<strong>当铺密码</strong>，下图为简单介绍。</p><p><img src="/CRYPTO-WriteUp.assets/image-20220907163506813.png" alt="image-20220907163506813"></p><p>102 108 97 103 123 99 116 102 115 104 111 119 125</p><p>很容易想到ascii码，对应可获得flag。</p><p><strong>flag{ctfshow}</strong></p><h2 id="find-the-table"><a href="#find-the-table" class="headerlink" title="find the table"></a>find the table</h2><p>题干给的信息为审查元素，F12打开控制台看源码可发现一串数据。</p><p>9 57 64 8 39 8 92 3 19 99 102 74</p><p>同时，题目table和元素一起，联想到元素周期表(Periodic table of elements)，在元素周期表中可以通过序号发现对应密文。</p><p>F La Gd O Y O U Li K Es No W</p><p>修改格式获得flag。</p><p><strong>flag{doyoulikesnow}</strong></p><h2 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">104046835712664064779194734974271185635538927889880611929931939711001301561682270177931622974642789920918902563361293345434055764293612446888383912807143394009019803471816448923969637980671221111117965227402429634935481868701166522350570364727873283332371986860194245739423508566783663380619142431820861051179</span></span><br><span class="line">q = <span class="number">140171048074107988605773731671018901813928130582422889797732071529733091703843710859282267763783461738242958098610949120354497987945911021170842457552182880133642711307227072133812253341129830416158450499258216967879857581565380890788395068130033931180395926482431150295880926480086317733457392573931410220501</span></span><br><span class="line">c = <span class="number">4772758911204771028049020670778336799568778930072841084057809867608022732611295305096052430641881550781141776498904005589873830973301898523644744951545345404578466176725030290421649344936952480254902939417215148205735730754808467351639943474816280980230447097444682489223054499524197909719857300597157406075069204315022703894466226179507627070835428226086509767746759353822302809385047763292891543697277097068406512924796409393289982738071019047393972959228919115821862868057003145401072581115989680686073663259771587445250687060240991265143919857962047718344017741878925867800431556311785625469001771370852474292194</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = gmpy2.powmod(c, d, p*q)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;b4by_R5A&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag{b4by_R5A}</strong></p><h2 id="easyrsa1"><a href="#easyrsa1" class="headerlink" title="easyrsa1"></a>easyrsa1</h2><p>通过<a href="http://www.factordb.com/">factordb</a>将n分解，得到p，q。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">q = <span class="number">1201147059438530786835365194567</span></span><br><span class="line">p = <span class="number">1212112637077862917192191913841</span></span><br><span class="line">n = <span class="number">1455925529734358105461406532259911790807347616464991065301847</span></span><br><span class="line">c = <span class="number">69380371057914246192606760686152233225659503366319332065009</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = gmpy2.powmod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;fact0r_sma11_N&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag{fact0r_sma11_N}</strong></p><h2 id="easyrsa2"><a href="#easyrsa2" class="headerlink" title="easyrsa2"></a>easyrsa2</h2><p>题目中e相同，n、c不同，求出n<del>1</del>与n<del>2</del>的最大公因数即为p，之后就可以得到q和d，从而求解m。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">23686563925537577753047229040754282953352221724154495390687358877775380147605152455537988563490716943872517593212858326146811511103311865753018329109314623702207073882884251372553225986112006827111351501044972239272200616871716325265416115038890805114829315111950319183189591283821793237999044427887934536835813526748759612963103377803089900662509399569819785571492828112437312659229879806168758843603248823629821851053775458651933952183988482163950039248487270453888288427540305542824179951734412044985364866532124803746008139763081886781361488304666575456680411806505094963425401175510416864929601220556158569443747</span></span><br><span class="line">c1 = <span class="number">1627484142237897613944607828268981193911417408064824540711945192035649088104133038147400224070588410335190662682231189997580084680424209495303078061205122848904648319219646588720994019249279863462981015329483724747823991513714172478886306703290044871781158393304147301058706003793357846922086994952763485999282741595204008663847963539422096343391464527068599046946279309037212859931303335507455146001390326550668531665493245293839009832468668390820282664984066399051403227990068032226382222173478078505888238749583237980643698405005689247922901342204142833875409505180847943212126302482358445768662608278731750064815</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">22257605320525584078180889073523223973924192984353847137164605186956629675938929585386392327672065524338176402496414014083816446508860530887742583338880317478862512306633061601510404960095143941320847160562050524072860211772522478494742213643890027443992183362678970426046765630946644339093149139143388752794932806956589884503569175226850419271095336798456238899009883100793515744579945854481430194879360765346236418019384644095257242811629393164402498261066077339304875212250897918420427814000142751282805980632089867108525335488018940091698609890995252413007073725850396076272027183422297684667565712022199054289711</span></span><br><span class="line">c2 = <span class="number">2742600695441836559469553702831098375948641915409106976157840377978123912007398753623461112659796209918866985480471911393362797753624479537646802510420415039461832118018849030580675249817576926858363541683135777239322002741820145944286109172066259843766755795255913189902403644721138554935991439893850589677849639263080528599197595705927535430942463184891689410078059090474682694886420022230657661157993875931600932763824618773420077273617106297660195179922018875399174346863404710420166497017196424586116535915712965147141775026549870636328195690774259990189286665844641289108474834973710730426105047318959307995062</span></span><br><span class="line"></span><br><span class="line">p = gmpy2.gcd(n1, n2) <span class="comment"># 欧几里得算法</span></span><br><span class="line">q = n1 // p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = gmpy2.powmod(c1, d, n1)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;m0_bv_hv_sv&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag{m0_bv_hv_sv}</strong></p><h2 id="easyrsa3"><a href="#easyrsa3" class="headerlink" title="easyrsa3"></a>easyrsa3</h2><p>题目中n相同，但e、c不同，为共模攻击。</p><p>共模攻击：使用了相同的模数n，用不同的秘钥e加密同一信息m。</p><blockquote><p>c1 &#x3D; m^e<del>1</del> % n</p><p>c2 &#x3D; m^e<del>2</del> % n</p></blockquote><p>根据拓展的欧几里得算法，可以得到e<del>1</del>s<del>1</del> + e<del>2</del>s<del>2</del> &#x3D; gcd(e<del>1</del>, e<del>2</del>) &#x3D; 1， s<del>1</del>、s<del>2</del>皆为整数，但是一正一负。所以<br>$$<br>(c_1^{s_1} * c_2^{s_2})%n &#x3D; ((m^{e_1}%n)^{s_1}<em>(m^{e_2}%n)^{s_2})%n<br>$$<br>化简为<br>$$<br>((m^{e_1})^{s_1})</em>((m^{e_2})^{s_2})%n&#x3D;(m^{e_1s_1+e_2s_2})%n<br>$$<br>由拓展的欧几里得算法已知e<del>1</del>s<del>1</del> + e<del>2</del>s<del>2</del> &#x3D; 1，所以<br>$$<br>c_1{s_1}*c_2{s_2} &#x3D; m<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">797</span></span><br><span class="line">n = <span class="number">15944475431088053285580229796309956066521520107276817969079550919586650535459242543036143360865780730044733026945488511390818947440767542658956272380389388112372084760689777141392370253850735307578445988289714647332867935525010482197724228457592150184979819463711753058569520651205113690397003146105972408452854948512223702957303406577348717348753106868356995616116867724764276234391678899662774272419841876652126127684683752880568407605083606688884120054963974930757275913447908185712204577194274834368323239143008887554264746068337709465319106886618643849961551092377843184067217615903229068010117272834602469293571</span></span><br><span class="line">c1 = <span class="number">11157593264920825445770016357141996124368529899750745256684450189070288181107423044846165593218013465053839661401595417236657920874113839974471883493099846397002721270590059414981101686668721548330630468951353910564696445509556956955232059386625725883038103399028010566732074011325543650672982884236951904410141077728929261477083689095161596979213961494716637502980358298944316636829309169794324394742285175377601826473276006795072518510850734941703194417926566446980262512429590253643561098275852970461913026108090608491507300365391639081555316166526932233787566053827355349022396563769697278239577184503627244170930</span></span><br><span class="line">e2 = <span class="number">521</span></span><br><span class="line">c2 = <span class="number">6699274351853330023117840396450375948797682409595670560999898826038378040157859939888021861338431350172193961054314487476965030228381372659733197551597730394275360811462401853988404006922710039053586471244376282019487691307865741621991977539073601368892834227191286663809236586729196876277005838495318639365575638989137572792843310915220039476722684554553337116930323671829220528562573169295901496437858327730504992799753724465760161805820723578087668737581704682158991028502143744445435775458296907671407184921683317371216729214056381292474141668027801600327187443375858394577015394108813273774641427184411887546849</span></span><br><span class="line"></span><br><span class="line">s = gmpy2.gcdext(e1, e2) <span class="comment"># 拓展欧几里得算法</span></span><br><span class="line">m1 = gmpy2.powmod(c1, s[<span class="number">1</span>], n)</span><br><span class="line">m2 = gmpy2.powmod(c2, s[<span class="number">2</span>], n)</span><br><span class="line">m = (m1*m2)%n</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;sh4r3_N&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag{sh4r3_N}</strong></p><h2 id="easyrsa4"><a href="#easyrsa4" class="headerlink" title="easyrsa4"></a>easyrsa4</h2><p>e很小，为低加密指数攻击。</p><ol><li>m^3^&lt;n，也就是说m^3^&#x3D;c。</li><li>m^3^&gt;n，即(m^3^+i*n)mod n &#x3D; c(爆破i)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = <span class="number">18970053728616609366458286067731288749022264959158403758357985915393383117963693827568809925770679353765624810804904382278845526498981422346319417938434861558291366738542079165169736232558687821709937346503480756281489775859439254614472425017554051177725143068122185961552670646275229009531528678548251873421076691650827507829859299300272683223959267661288601619845954466365134077547699819734465321345758416957265682175864227273506250707311775797983409090702086309946790711995796789417222274776215167450093735639202974148778183667502150202265175471213833685988445568819612085268917780718945472573765365588163945754761</span></span><br><span class="line">c = <span class="number">150409620528139732054476072280993764527079006992643377862720337847060335153837950368208902491767027770946661</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot((c+i*n),<span class="number">3</span>)[<span class="number">1</span>] == <span class="literal">True</span>: <span class="comment"># gmpy2.iroot(x,n) x开n次根</span></span><br><span class="line">        m = gmpy2.iroot((c+i*n),<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;Sm4ll_eee&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag{Sm4ll_eee}</strong></p><h2 id="easyrsa5"><a href="#easyrsa5" class="headerlink" title="easyrsa5"></a>easyrsa5</h2><p>e和n都很大，根据加密的过程，可以很容易爆破出d，为低解密指数攻击。使用爆破d脚本<a href="https://github.com/pablocelayes/rsa-wiener-attack">rsa-wiener-attack.py</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> RSAwienerHacker</span><br><span class="line"></span><br><span class="line">e = <span class="number">284100478693161642327695712452505468891794410301906465434604643365855064101922252698327584524956955373553355814138784402605517536436009073372339264422522610010012877243630454889127160056358637599704871937659443985644871453345576728414422489075791739731547285138648307770775155312545928721094602949588237119345</span></span><br><span class="line">n = <span class="number">468459887279781789188886188573017406548524570309663876064881031936564733341508945283407498306248145591559137207097347130203582813352382018491852922849186827279111555223982032271701972642438224730082216672110316142528108239708171781850491578433309964093293907697072741538649347894863899103340030347858867705231</span></span><br><span class="line">c = <span class="number">350429162418561525458539070186062788413426454598897326594935655762503536409897624028778814302849485850451243934994919418665502401195173255808119461832488053305530748068788500746791135053620550583421369214031040191188956888321397450005528879987036183922578645840167009612661903399312419253694928377398939392827</span></span><br><span class="line"></span><br><span class="line">d = RSAwienerHacker.hack_RSA(e,n)</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;very_biiiiig_e&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag{very_biiiiig_e}</strong></p><h2 id="easyrsa6"><a href="#easyrsa6" class="headerlink" title="easyrsa6"></a>easyrsa6</h2><p>题目给出了一个py文件，同时很容易可以发现p和q为相邻的两个质数。</p><p>通过yafu来分解n。P.S. <a href="https://sourceforge.net/projects/yafu/">yafu自动整数因式分解</a></p><p><img src="/CRYPTO-WriteUp.assets/image-20220913152344189.png" alt="image-20220913152344189"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">26737417831000820542131903300607349805884383394154602685589253691058592906354935906805134188533804962897170211026684453428204518730064406526279112572388086653330354347467824800159214965211971007509161988095657918569122896402683130342348264873834798355125176339737540844380018932257326719850776549178097196650971801959829891897782953799819540258181186971887122329746532348310216818846497644520553218363336194855498009339838369114649453618101321999347367800581959933596734457081762378746706371599215668686459906553007018812297658015353803626409606707460210905216362646940355737679889912399014237502529373804288304270563</span></span><br><span class="line">c = <span class="number">18343406988553647441155363755415469675162952205929092244387144604220598930987120971635625205531679665588524624774972379282080365368504475385813836796957675346369136362299791881988434459126442243685599469468046961707420163849755187402196540739689823324440860766040276525600017446640429559755587590377841083082073283783044180553080312093936655426279610008234238497453986740658015049273023492032325305925499263982266317509342604959809805578180715819784421086649380350482836529047761222588878122181300629226379468397199620669975860711741390226214613560571952382040172091951384219283820044879575505273602318856695503917257</span></span><br><span class="line">q = <span class="number">163515803000813412334620775647541652549604895368507102613553057136855632963322853570924931001138446030409251690646645635800254129997200577719209532684847732809399187385176309169421205833279943214621695444496660249881675974141488357432373412184140130503562295159152949524373214358417567189638680209172147385801</span></span><br><span class="line">p = <span class="number">163515803000813412334620775647541652549604895368507102613553057136855632963322853570924931001138446030409251690646645635800254129997200577719209532684847732809399187385176309169421205833279943214621695444496660249881675974141488357432373412184140130503562295159152949524373214358417567189638680209172147385163</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = gmpy2.powmod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;p&amp;q_4re_t00_c1o5ed&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag{p&amp;q_4re_t00_c1o5ed}</strong></p><h2 id="easyrsa7"><a href="#easyrsa7" class="headerlink" title="easyrsa7"></a>easyrsa7</h2><p>打开题目获得数据，可以发现p的低位数据已损失，尝试用sagemath恢复p。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = 0x10001</span><br><span class="line">p&gt;&gt;128&lt;&lt;128 = 0xd1c520d9798f811e87f4ff406941958bab8fc24b19a32c3ad89b0b73258ed3541e9ca696fd98ce15255264c39ae8c6e8db5ee89993fa44459410d30a0a8af700ae3aee8a9a1d6094f8c757d3b79a8d1147e85be34fb260a970a52826c0a92b46cefb5dfaf2b5a31edf867f8d34d2222900000000000000000000000000000000</span><br><span class="line">n = 0x79e0bf9b916e59286163a1006f8cefd4c1b080387a6ddb98a3f3984569a4ebb48b22ac36dff7c98e4ebb90ffdd9c07f53a20946f57634fb01f4489fcfc8e402865e152820f3e2989d4f0b5ef1fb366f212e238881ea1da017f754d7840fc38236edba144674464b661d36cdaf52d1e5e7c3c21770c5461a7c1bc2db712a61d992ebc407738fc095cd8b6b64e7e532187b11bf78a8d3ddf52da6f6a67c7e88bef5563cac1e5ce115f3282d5ff9db02278859f63049d1b934d918f46353fea1651d96b2ddd874ec8f1e4b9d487d8849896d1c21fb64029f0d6f47e560555b009b96bfd558228929a6cdf3fb6d47a956829fb1e638fcc1bdfad4ec2c3590dea1ed3</span><br><span class="line">c = 0x1b2b4f9afed5fb5f9876757e959c183c2381ca73514b1918d2f123e386bebe9832835350f17ac439ac570c9b2738f924ef49afea02922981fad702012d69ea3a3c7d1fc8efc80e541ca2622d7741090b9ccd590906ac273ffcc66a7b8c0d48b7d62d6cd6dd4cd75747c55aac28f8be3249eb255d8750482ebf492692121ab4b27b275a0f69b15baef20bf812f3cbf581786128b51694331be76f80d6fb1314d8b280eaa16c767821b9c2ba05dfde5451feef22ac3cb3dfbc88bc1501765506f0c05045184292a75c475486b680f726f44ef8ddfe3c48f75bb03c8d44198ac70e6b7c885f53000654db22c8cee8eb4f65eaeea2da13887aaf53d8c254d2945691</span><br></pre></td></tr></table></figure><p><img src="/CRYPTO-WriteUp.assets/image-20220919105904588.png" alt="image-20220919105904588"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">p = <span class="number">147305526294483975294006704928271118039370615054437206404408410848858740256154476278591035455064149531353089038270283281541411458250950936656537283482331598521457077465891874559349872035197398406708610440618635013091489698011474611145014167945729411970665381793142591665142813403717755897604710955779069313024</span></span><br><span class="line">n = <span class="number">0x79e0bf9b916e59286163a1006f8cefd4c1b080387a6ddb98a3f3984569a4ebb48b22ac36dff7c98e4ebb90ffdd9c07f53a20946f57634fb01f4489fcfc8e402865e152820f3e2989d4f0b5ef1fb366f212e238881ea1da017f754d7840fc38236edba144674464b661d36cdaf52d1e5e7c3c21770c5461a7c1bc2db712a61d992ebc407738fc095cd8b6b64e7e532187b11bf78a8d3ddf52da6f6a67c7e88bef5563cac1e5ce115f3282d5ff9db02278859f63049d1b934d918f46353fea1651d96b2ddd874ec8f1e4b9d487d8849896d1c21fb64029f0d6f47e560555b009b96bfd558228929a6cdf3fb6d47a956829fb1e638fcc1bdfad4ec2c3590dea1ed3</span></span><br><span class="line">c = <span class="number">0x1b2b4f9afed5fb5f9876757e959c183c2381ca73514b1918d2f123e386bebe9832835350f17ac439ac570c9b2738f924ef49afea02922981fad702012d69ea3a3c7d1fc8efc80e541ca2622d7741090b9ccd590906ac273ffcc66a7b8c0d48b7d62d6cd6dd4cd75747c55aac28f8be3249eb255d8750482ebf492692121ab4b27b275a0f69b15baef20bf812f3cbf581786128b51694331be76f80d6fb1314d8b280eaa16c767821b9c2ba05dfde5451feef22ac3cb3dfbc88bc1501765506f0c05045184292a75c475486b680f726f44ef8ddfe3c48f75bb03c8d44198ac70e6b7c885f53000654db22c8cee8eb4f65eaeea2da13887aaf53d8c254d2945691</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = gmpy2.powmod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;Kn0wn_Hi9h_Bit5&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag{Kn0wn_Hi9h_Bit5}</strong></p><h2 id="easyrsa8"><a href="#easyrsa8" class="headerlink" title="easyrsa8"></a>easyrsa8</h2><p>解压获得一个flag.enc以及public.key，通过python脚本从public.key中获得n和e。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> long</span><br><span class="line"></span><br><span class="line">public = RSA.importKey(<span class="built_in">open</span>(<span class="string">&#x27;public.key&#x27;</span>).read())</span><br><span class="line">n = long(public.n)</span><br><span class="line">e = long(public.e)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># 10306247299477991196335954707897189353577589618180446614762218980226685668311143526740800444344046158260556585833057716406703213966249956775927205061731821632025483608182881492214855240841820024816859031176291364212054293818204399157346955465232586109199762630150640804366966946066155685218609638749171632685073</span></span><br><span class="line"><span class="comment"># 65537</span></span><br></pre></td></tr></table></figure><p>分解n得到p，q。</p><p><img src="/CRYPTO-WriteUp.assets/image-20220919114118051.png" alt="image-20220919114118051"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> long</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">97</span></span><br><span class="line">q = <span class="number">106249972159566919549855203174197828387397831115262336234662051342543151219702510584956705611794290291345944183845955839244363030579896461607496959399297130227066841321473005074379950936513608503266587950271044991876848389878395867601515004796212227929894460104645781488319246866661398816686697306692491058609</span></span><br><span class="line">n = <span class="number">10306247299477991196335954707897189353577589618180446614762218980226685668311143526740800444344046158260556585833057716406703213966249956775927205061731821632025483608182881492214855240841820024816859031176291364212054293818204399157346955465232586109199762630150640804366966946066155685218609638749171632685073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="comment"># d = gmpy2.invert(e, (p-1)*(q-1))</span></span><br><span class="line">d = <span class="number">4520639064487098151327174667961365516283539231992543792882057746866179464294032313887767783621724945557985447874376379715922452725597335427159165685648572663979688014560576024497341124412004366514253110547369977143739781801290219136578513871764574450392367530817034216313429071683911546803031169524669257788417</span></span><br><span class="line">rsakey = RSA.importKey(<span class="built_in">open</span>(<span class="string">&#x27;public.key&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read())</span><br><span class="line">privatekey = RSA.construct((n,e,d,p,q))</span><br><span class="line">rsa = PKCS1_OAEP.new(privatekey)</span><br><span class="line">m = rsa.decrypt(<span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;p_1s_5mall_num6er&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>flag{p_1s_5mall_num6er}</strong></p><h2 id="萌新赛"><a href="#萌新赛" class="headerlink" title="萌新赛"></a>萌新赛</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>密文为<code>Ao(mgHX^E)AN2PSBOu3qI0o</code></p><p>通过(、)、^可以猜测是比base64高的base加密，前面的<code>Ao(mgHX</code>是’flag{‘的base85加密结果，通过base85解密可获得flag。</p><p><strong>flag{base85_here}</strong></p><h3 id="抱我"><a href="#抱我" class="headerlink" title="抱我"></a>抱我</h3><p>输出明文为非常长的一段字符串，仔细观察可发现仅包含了f、l、a、g、{、}、3、6、d这几个字符，几乎每个都有三百多次出现，再仔细查看源代码，可以发现加密方式是循环，先从cstring中随机取一个字符，再在key也就是flag中随机取十个字符，以此类推。</p><p>P.S. 当然可以直接词频分析看数量异常多的字符，或者如下写个脚本取出纯由flag构成的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">cipher</span>):</span><br><span class="line">    decipher = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>, <span class="built_in">len</span>(cipher), <span class="number">11</span>):</span><br><span class="line">    decipher += cipher[i:i+<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">return</span> decipher</span><br><span class="line">cipher = <span class="string">&#x27;密文串&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(decode(cipher))</span><br></pre></td></tr></table></figure><p>词频分析后可知flag。</p><p><strong>flag{36d}</strong></p><h3 id="妈呀，完了"><a href="#妈呀，完了" class="headerlink" title="妈呀，完了"></a>妈呀，完了</h3><p>先二进制转字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int_ = <span class="string">&quotquot;</span></span><br><span class="line">int_ = int_.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">str_ = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(int_[i:i+<span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(int_), <span class="number">8</span>)])</span><br><span class="line"><span class="built_in">print</span>(str_)</span><br><span class="line"><span class="comment"># DSy3JyKvPCPmH4WCz+ThWi2FgKo9eSPU4e5g+jZU3FrWNvLM55kEf1hEmNru+NE3</span></span><br></pre></td></tr></table></figure><p>听说是AES加密，妈呀，完了以及图片结合猜测是玛雅文明预言世界末日的日期，密码为20121221，AES解密可得flag。</p><p><strong>flag{第13个伯克盾将会结束}</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/29/hello-world/"/>
      <url>/2024/10/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>pictures</title>
      <link href="/pictures/index.html"/>
      <url>/pictures/index.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line"></span><br><span class="line">&#123;% galleryGroup &#x27;封面专区&#x27; &#x27;本站用作文章封面的图片，不保证分辨率&#x27; &#x27;/box/Gallery/photo&#x27; https://source.fomal.cc/img/default_cover_61.webp %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% galleryGroup &#x27;背景专区&#x27; &#x27;收藏的一些的背景与壁纸，分辨率很高&#x27; &#x27;/box/Gallery/wallpaper&#x27; https://source.fomal.cc/img/dm11.webp %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
